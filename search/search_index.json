{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to SurveyCompo, your tool for creating dynamic and adaptable surveys.</p>"},{"location":"#what-is-surveycompo","title":"What is SurveyCompo?","text":"<p>SurveyCompo is a purpose-built web component offering exceptional flexibility, customization, and programmability. Creating a survey with SurveyCompo is straightforward: provide JSON-based data, and it renders your survey design.</p> <p>SurveyCompo's capabilities extend beyond creation. Its integration into your existing tech stack enables real-time data capture and interactive experiences. Style your surveys to match your brand using themes and CSS, and use event listeners to respond dynamically to user input.</p> <p>With SurveyCompo, you have full control over every aspect of your surveys. Build tailored data-gathering tools that meet your evolving needs.</p>"},{"location":"#minimal-example","title":"Minimal example","text":"<p> view source</p> index.htmlcommon.csssource.json <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Basic&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"../common.css\"&gt;\n  &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;survey-compo src=\"./source.json\" /&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <pre><code>html, body {\n    font-family: \"Inter\", sans-serif;\n    font-optical-sizing: auto;\n    margin: 0;\n    padding: 0;\n    height: 100%;\n    width: 100%;\n}\n</code></pre> <pre><code>{\n\t\"name\": \"Basic\",\n\t\"startScreens\": [\n\t\t{\n\t\t\t\"header\": \"Welcome to Our Survey!\",\n\t\t\t\"description\": \"Thank you for participating.\",\n\t\t\t\"okButtonLabel\": \"Start Survey\"\n\t\t}\n\t],\n\t\"pages\": [\n\t\t{\n\t\t\t\"blocks\": [\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"What\u2019s your favorite type of weather?\",\n\t\t\t\t\t\"inputs\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"RADIO\",\n\t\t\t\t\t\t\t\"label\": \"Sunny and warm\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"RADIO\",\n\t\t\t\t\t\t\t\"label\": \"Cozy and rainy\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"RADIO\",\n\t\t\t\t\t\t\t\"label\": \"Snowy and magical\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"nextButtonLabel\": \"Submit\"\n\t\t}\n\t],\n\t\"completeScreens\": [\n\t\t{\n\t\t\t\"header\": \"Thank You!\",\n\t\t\t\"description\": \"Your responses have been recorded.\",\n\t\t\t\"okButtonLabel\": \"Close\"\n\t\t}\n\t]\n}\n</code></pre>"},{"location":"#key-benefits","title":"Key Benefits","text":"<ul> <li> <p> Highly Customizable</p> <p>Adjust its size, position, and styling to blend with your brand and style using CSS. Choose a theme or create a unique design that suits your needs.</p> </li> <li> <p> Easy Integration</p> <p>Leverage event listeners for seamless data capture and dynamic interactions. SurveyCompo seamlessly integrates with your existing tech stack, whether it\u2019s Angular, React, Vue, jQuery, or plain JavaScript.</p> </li> <li> <p> Exceptional Flexibility</p> <p>Create traditional surveys or opt for engaging conversational formats. With SurveyCompo\u2019s intuitive block-based layout, you have unmatched flexibility and control over the structure and flow of your questions.</p> </li> <li> <p> Powerful Survey Tools</p> <p>SurveyCompo provides a comprehensive toolkit. Create dynamic, intelligent surveys using features like input validation, skip logic, branching, randomization, piping, and custom variables.</p> </li> <li> <p> Programmable</p> <p>SurveyCompo\u2019s JSON-based design makes your surveys truly adaptable. It allows you to manage versions, load content dynamically, conduct A/B testing, and implement advanced strategies like Survey Segmentation and Audience Retargeting.</p> </li> <li> <p> Full Data Control</p> <p>With the self-hosting option, you maintain full control and ownership of your sensitive survey data. Ensure compliance with privacy regulations and meet your specific security needs.</p> </li> </ul>"},{"location":"publish/","title":"Publish and Share","text":""},{"location":"publish/#publishing-surveys","title":"Publishing Surveys","text":"<p>Congratulations! You have created a survey and are ready to publish and share it with your target audience.</p> <p>SurveyCompo provides a one-click button for publishing surveys. During this process, SurveyCompo consolidates all pending edits since the last publish, generates a new version of the survey JSON model with a unique survey ID and a signature hash.</p> <p>If you make any changes to a survey after publishing it, you will need to publish the survey again to make the changes available to your audience.</p> <p>Published surveys are publicly accessible and can be shared with your audience. If you need to pause a survey or keep it private for self-hosting and data collection, you can disable public access.</p> <p></p>"},{"location":"publish/#sharing-surveys","title":"Sharing Surveys","text":"<p>Sharing a survey involves making it available to your audience so they can respond. SurveyCompo provides the following options for sharing a survey.</p> <ol> <li>Share a survey with a unique URL</li> <li>Embed the survey on your web page</li> </ol> <p></p>"},{"location":"publish/#share-a-survey-with-a-unique-url","title":"Share a survey with a unique URL","text":"<p>SurveyCompo provides a dedicated, unique page for each survey by default, making it easy to share and start collecting responses immediately. Simply share the survey link with your audience\u2014through email, for instance, and responses will begin populating in real time. You can also customize the survey page by setting the background color, adding a page header or footer, and adjusting other display options to match your brand's style.</p>"},{"location":"publish/#embed-the-survey-on-your-web-page","title":"Embed the survey on your web page","text":"<p>To embed the survey on your HTML page, simply copy and paste the embed code provided by SurveyCompo. This lets you display the survey within any section or block on your page. You can style the survey with CSS to align with your design, adjusting colors, fonts, and layout. Additionally, you can control its visibility with JavaScript, showing or hiding it in a modal, popup, or slide-in panel as needed.</p>"},{"location":"publish/#hosting-surveys-yourself","title":"Hosting surveys yourself","text":"<p>SurveyCompo offers an option to host surveys and collect responses on your own server.</p> <p>To set up self-hosting, follow these steps:</p> <ul> <li>Host the survey JSON file on your own server.</li> <li>Host the SurveyCompo web component JavaScript file on your server.</li> <li>Integrate the SurveyCompo web component into your website or application.</li> <li>Collect survey responses and performance data using your preferred server-side technology.</li> </ul> <p></p> <p>You can download both the survey JSON file and the SurveyCompo JavaScript library and host them on your server.</p> <p>For collecting survey responses and performance data, you can also use SurveyCompo Events. For more details on collecting survey data, refer to the Survey Events and Data Collection documentation.</p> <p>Note</p> <p>Collecting survey responses with self-hosted surveys requires a Premium Plan or higher. For more details, please refer to the Pricing page.</p>"},{"location":"advanced/conditional-logic/","title":"Conditional Logic","text":"<p>Conditional logic, also known as branching logic and skipping logic, involves setting rules that determine whether a question or section of the survey should be shown based on multiple conditions or previous answers. It is used to create a more personalized survey experience for respondents by displaying only the questions that are relevant to them.</p> <p>SurveyCompo uses Condition Expressions to define conditional logic. <code>#age &gt; 18</code> is an example of a Condition Expression. This expression evaluates to a boolean value, which can be used to determine whether a page or a question should be displayed when used with the key <code>visibleIf</code>. For example:</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"type\": \"question\",\n          \"question\": \"What is your age?\",\n          \"inputs\": [\n            {\n              \"id\": \"age\",\n              \"type\": \"TEXT\",\n              \"textInputType\": \"NUMBER\"\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"visibleIf\": \"#age &gt; 18\",\n      \"blocks\": [\n        {\n          \"type\": \"question\",\n          \"question\": \"What is your favorite color?\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>In the above example, the page with the question \"What is your favorite color?\" will only be displayed if the respondent's age is greater than 18. The <code>visibleIf</code> key is applicable to Screen, Page, Block, and Input models. You can apply conditional logic to these elements.</p>"},{"location":"advanced/conditional-logic/#simple-condition-expression","title":"Simple Condition Expression","text":"<p>A simple Condition Expression is a string designed to evaluate to a boolean value, following the syntax <code>[variable or input reference] [comparison operator] [value]</code>. For instance, <code>#age &gt; 18</code> illustrates how to use this expression:</p> <ul> <li>Prefix a variable name with <code>$</code> to reference a variable, or use <code>#</code> to reference a previous input's value.</li> <li>Use comparison operators such as <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, or <code>&lt;=</code> for evaluating conditions.</li> <li>The value is what you compare against using the operator.</li> </ul> <p>The 'value' part of the Condition Expression does not need to be quoted. For example, <code>$name == John Smith</code>. To compare with a boolean value, use 'true' or 'false' for comparison, for example, <code>$male == true</code> and <code>$male == false</code>. SurveyCompo offers a shortcut syntax for boolean values: <code>#male</code> is equivalent to <code>#male == true</code>.</p> <p>When evaluating equality (i.e.,<code>==</code> and <code>!=</code>), comparisons are performed as string comparisons. This means that both operands in the comparison are converted to the <code>String</code> type before comparison. For instance, the Condition Expression <code>#age == true</code>  would evaluate to false, as the numeric value (e.g., \"18\") is compared against the string representation of a boolean value (\"true\").</p> <p>In cases involving other types of comparisons, if the 'value' specified is numeric, the comparison is executed numerically. For instance, the expression <code>#age &gt; 18</code> returns true if the 'age' input's value exceeds 18. Conversely, if the 'value' is a string, the comparison is conducted as a string comparison. Thus, <code>$name &gt; H</code> would be true if the 'name' variable's value alphabetically follows \"H\", such as in the case of \"John\".</p> <p>Note</p> <p>An invalid Condition Expression is treated as false. This means any expression that fails to meet the required syntax or reference valid variables or inputs will be evaluated as false. Conversely, an empty expression is considered true, indicating that no condition was specified. Examples of empty expressions include an empty <code>string</code>, <code>null</code>, or <code>undefined</code>.</p>"},{"location":"advanced/conditional-logic/#nested-condition-expression","title":"Nested Condition Expression","text":"<p>A nested Condition Expression is an object with one or more logical operator as keys. The logical operators are <code>$and</code>, <code>$or</code>, and <code>$not</code>. The value of these keys is an array of other Condition Expressions. For example:</p> <pre><code>/* ... visible for those male AND 18+ yo */\n\"visibleIf\": {\n  \"$and\": [\n    \"#age &gt;= 18\",\n    \"#gender == male\"\n  ]\n}\n/* ... */\n</code></pre> <p>The logical operators are evaluated in the following manner:</p> <ul> <li><code>$and</code>: All conditions must be true for the expression to evaluate to true.</li> <li><code>$or</code>: At least one condition must be true for the expression to evaluate to true.</li> <li><code>$not</code>: The condition evaluates to true if the nested condition evaluates to false.</li> </ul> <p>Complex expressions can be crafted by combining logical operators in a nested manner. For instance, consider an expression designed to evaluate as true if the respondent is at least 18 years old, resides in New York City, and possesses either a high level of education or a significant income:</p> <pre><code>/* ... */\n\"visibleIf\": {\n  \"$and\": [\n    {\n      \"$or\": [\"#edu == high\", \"#income == high\"]\n    },\n    \"#city == NY\"\n  ],\n  \"$not\": [\"#age &lt;  18\"]\n}\n/* ... */\n</code></pre> <p>Note</p> <p>A nested Condition Expression is deemed invalid if it contains any keys other than the three logical operators, or if the value is not an array. In such cases, the expression is evaluated as <code>false</code>. Conversely, an empty nested expression <code>{}</code> is considered <code>true</code>, indicating that no specific condition was set.</p>"},{"location":"advanced/disqualification/","title":"Disqualification","text":"<p>SurveyCompo supports disqualification logic to exclude participants who do not meet specific criteria. This feature ensures that only eligible participants complete your survey. You can disqualify participants based on their previous input data and variables.</p> <p>The disqualification feature is built on Conditional Logic. To define disqualification logic in SurveyCompo, add an abort screen to the <code>abortScreens</code> key in the <code>survey</code> model. The abort screen must contain a <code>visibleIf</code> key to define the disqualification conditions that trigger the abort screen.</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"pages\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    {\n      \"header\": \"Disqualified\",\n      \"visibleIf\": \"#age &lt; 18\",\n      \"description\": \"You are not eligible to participate in this survey.\",\n      \"okButtonLabel\": \"Close\"\n    }\n  ]\n}\n</code></pre> <p>SurveyCompo allows you to define multiple abort screens with different disqualification conditions. The abort screen that matches the disqualification condition is displayed to the participant. This enables you to customize the abort screen message based on the disqualification criteria. If multiple abort screens match the disqualification condition, the one with the most specific conditional logic is displayed.</p> <p>Warning</p> <p>An abort screen must contain a <code>visibleIf</code> key. If the <code>visibleIf</code> key is not present, it is deemed 'condition met' and the abort screen will always be displayed.</p>"},{"location":"advanced/piping/","title":"Piping","text":"<p>Piping is a technique that shows the value of a variable or a previously inputted value in a survey. This technique is commonly used to personalize the survey by addressing the respondent by their name or to display any other information that is relevant to the respondent.</p>"},{"location":"advanced/piping/#piping-with-variables-and-prior-input-values","title":"Piping with Variables and Prior Input Values","text":"<p>In SurveyCompo, piping is achieved by using the <code>{$variableName}</code> and <code>{#inputID}</code> syntax. The variable name or input ID is enclosed within curly braces with <code>$</code> and <code>#</code> prefixes, respectively.</p> <p>In the <code>{$variableName}</code> syntax, the 'variableName' corresponds to one of the keys in the variables object within the survey model. Similarly, the 'inputID' in <code>{#inputID}</code> refers to the id key of one of the Input models. These placeholders can be used in text-based fields of the survey model, like the header, title, description, and options of the inputs. When the survey is displayed, these placeholders are swapped out with the real values of the variables or inputs.</p> <p>The following example uses piping to display the respondent's name in the start screen:</p> PreviewJSON <p></p> <pre><code>{\n  /* ... */\n  \"variables\": {\n\t  \"name\": \"John\"\n\t},\n  \"startScreens\": [\n\t\t\t{\n\t\t\t\t\"header\": \"We value your insights! \",\n\t\t\t\t\"description\": \"Hello {$name}, would you be interested in participating in our survey?\",\n\t\t\t\t\"okButtonLabel\": \"Start Survey\"\n\t\t\t}\n\t]\n}\n</code></pre> <p>But what if you want to have different text based on the value of a variable or input? This is where the piping modifier comes into play.</p>"},{"location":"advanced/piping/#piping-modifiers","title":"Piping Modifiers","text":"<p>A piping modifier is a string added to the variable or input ID inside the curly braces. It's separated from the variable or input ID by a <code>|</code>. You can use a piping modifier to change how the variable or input value is displayed.</p> <p>The following piping modifiers are available in SurveyCompo:</p> Modifier Example Description <code>upper</code> <code>{#name|upper}</code> Convert the variable or input value to uppercase. <code>lower</code> <code>{#name|lower}</code> Convert the variable or input value to lowercase. <code>cap</code> <code>{#name|cap}</code> Capitalize the first letter of the variable or input value. <code>title</code> <code>{#name|title}</code> Convert the variable or input value to title case. <code>default</code> <code>{$name|default:user}</code> Use the first parameter as the output if the variable or input value is falsy (undefined or empty). <code>yesno</code> <code>{#adult|yesno:$20:$0}</code> If the variable or input value is truthy (defined and not empty), use the first parameter as the output, otherwise use the second parameter as the output. <code>plural</code> <code>{#count|plural:person:people}</code> If the variable or input value is not evaluated to 1, use the second parameter as the output, otherwise use the first parameter as the output. <code>eq</code> <code>{#hungry|eq:true:eat:rest}</code> If the variable or input value is equal to the first parameter, use the third parameter as the output, otherwise use the second parameter as the output. <code>gt</code> <code>{#height|gt:100:tall:short}</code> If the variable or input value is greater than the first parameter, use the third parameter as the output, otherwise use the second parameter as the output. <code>lt</code> <code>{#price|lt:100:cheap:expensive}</code> If the variable or input value is less than the first parameter, use the third parameter as the output, otherwise use the second parameter as the output. <p>Tip</p> <p>Parameters for modifiers are divided by a colon <code>:</code>. If a parameter includes a colon within it, you should escape it with an underscores, like this: <code>_:_</code>. If a parameter is not provided, it's assumed to be an empty string.</p> <p>You can use multiple modifiers in a single piping expression. The modifiers are applied in the order they are written. For example, <code>{#name|title|default:John}</code> will first convert the value to title case and then use 'John' if the value is falsy.</p> <p>Let's bring it all together with this example:</p> <p> view source</p> <p>Tip</p> <p>You can technically use piping wherever you prefer, even piping the response to the current question into the question title itself. However, remember that the piped input value will be empty until the response is captured. For a better user experience, it's recommended to use piping in subsequent pages.</p>"},{"location":"advanced/prefill/","title":"Prefilling","text":"<p>Prefilling answers in a survey is a frequent requirement in many survey applications. This feature enables setting default values for questions, serving various purposes such as:</p> <ul> <li>Providing context to respondents.</li> <li>Saving respondents' time.</li> <li>Ensuring response consistency.</li> </ul>"},{"location":"advanced/prefill/#default-input-value","title":"Default Input Value","text":"<p>The Input data model supports a <code>defaultValue</code> key to specify default values for inputs. This key accepts a string, boolean, or numeric value representing the default input value. For example:</p> JSONPreview <pre><code>{\n  \"name\": \"My Survey\",\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"title\": \"What is your name?\",\n          \"inputs\": [\n            {\n              \"id\": \"name\",\n              \"type\": \"TEXT\",\n              \"defaultValue\": \"John Smith\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p></p> <p>In the above example, the question \"What is your name?\" will be prefilled with the value \"John Smith\" when the respondent loads the survey.</p> <p>The <code>defaultValue</code> key can be used with all Input types in SurveyCompo. It automatically converts the provided default value to the corresponding type based on the input type if necessary. For instance, for an input type that expects boolean values, the default value is converted into boolean type. For example, '1', 'true', 1, 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'True', 'TRUE' are all converted to <code>true</code>.</p> <p>Note</p> <p>Default values are applied only at the beginning of a survey session. If the respondent alters the input's value during the session, the default setting will not reapply if the input is cleared or deselected.</p>"},{"location":"advanced/prefill/#injected-input-values","title":"Injected Input Values","text":"<p>There are use cases where input values are injected into the survey in a batch. This functionality is achieved using the <code>inputValues</code> key in the Survey model. It proves beneficial for scenarios where respondents can resume a survey from where they left off or return to it later.</p> <p>The <code>inputValues</code> key is an object that holds input values for each input in the survey, identified by input IDs. For instance:</p> JSONPreview <pre><code>{\n  \"name\": \"My Survey\",\n  \"inputValues\": {\n    \"name\": \"John Smith\",\n    \"age\" : 23\n  },\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"title\": \"What is your name?\",\n          \"inputs\": [\n            {\n              \"id\": \"name\",\n              \"type\": \"TEXT\"\n            }\n          ]\n        },\n        {\n          \"title\": \"What is your age?\",\n          \"inputs\": [\n            {\n              \"id\": \"age\",\n              \"type\": \"TEXT\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p></p>"},{"location":"advanced/randomization/","title":"Randomization","text":"<p>Randomization in the context of surveys refers to the process of presenting questions or response options in a random order for each respondent. This technique is used to control for the effects of question order bias, where the order in which questions or response options are presented can influence the responses. By randomizing the order, you can ensure that the data collected is not influenced by the sequence of the questions or options.</p> <p>SurveyCompo allows for randomization at various levels. You can shuffle the sequence of pages in a survey, blocks on a page, and inputs within a block. SurveyCompo gives you control over how much you want to randomize. You can either group certain items together and shuffle them within their groups, or you can shuffle all items individually.</p> <p>The <code>randomWithinGroup</code> key is a powerful tool for adding randomization to your survey. By giving the same <code>randomWithinGroup</code> string value to certain items, you can randomize their order while keeping the sequence of other items intact. Let's illustrate this with an example (Hint: Click the 'Close' button to observe the effects of randomization.)</p> <p> view source</p> <p>The <code>randomWithinGroup</code> key can be used with Pages, Blocks, and Inputs in the model. In the given example, we have two pages, each with two questions. By using the <code>randomWithinGroup</code> key, these two pages are grouped and shuffled together. Similarly, the two blocks within each page are also grouped and shuffled together. The inputs in the blocks titled 'Which of the following features do you use most often?' and 'How did you first learn about our product/service?' are grouped for randomization. However, the 'Other' inputs are not part of the random group, so they always appear last in their respective blocks. Items without the <code>randomWithinGroup</code> key retain their original positions.</p> <p>It's worth noting that the randomization happens when the survey is initialized and stays the same throughout the survey duration. The specific value assigned to the randomWithinGroup key is irrelevant, as long as it's identical for all items that should be shuffled together.</p>"},{"location":"advanced/templates/","title":"Templates","text":"<p>Templates in SurveyCompo let you reuse survey components across various Pages or Blocks, which helps keep everything consistent. If you notice you're repeating the same settings or keys on different pages or blocks, you can create a template for those keys. Then, you can reuse the template wherever needed. Any changes you make to the template will automatically update all the pages or blocks using it.</p> <p>To define a template in SurveyCompo, use the <code>pageTemplates</code> and <code>blockTemplates</code> keys in the survey model. The <code>pageTemplates</code> key holds an array of page models that can be used as templates, while the <code>blockTemplates</code> key holds an array of block models for the same purpose. Each template is given a unique name using the <code>templateName</code> key.</p> <p>The following example defines an page template with a footer and applied to multiple pages:</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"pageTemplates\": [\n    {\n      \"templateName\": \"pageWithFooter\",\n      \"htmlFooter\": \"&lt;p&gt;By submitting this survey, you agree to our &lt;a href='https://www.surveycompo.com/privacy' class='my-link'&gt;Privacy Policy&lt;/a&gt;&lt;/p&gt;\"\n    }\n  ],\n  \"pages\": [\n    {\n      \"templateName\": \"pageWithFooter\",\n      \"blocks\": [\n        {\n          \"title\": \"What is your preferred method of contact?\",\n          \"inputs\": [\n            {\n              \"type\": \"DROPDOWN\",\n              \"hint\": \"Please select\",\n              \"id\": \"methodOfContact\",\n              \"dropdownInputOptions\": [\"Email\", \"Phone\", \"Text Message\"],\n              \"validations\": [\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"Please select your preferred method of contact\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"templateName\": \"pageWithFooter\",\n      \"nextButtonLabel\": \"Submit\",\n      \"blocks\": [\n        {\n          \"title\": \"Overall, how satisfied are you with our product?\",\n          \"inputs\": [\n            {\n              \"type\": \"LIKERT_SCALE\",\n              \"likertInputPreset\": \"SATISFACTION\",\n              \"id\": \"satisfaction\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>Block templates work similarly to page templates, allowing you to define and reuse them across multiple blocks.</p> <p>Note</p> <p>The <code>inputs</code> and <code>blocks</code> keys in templates are ignored. This means you cannot use templates to repeat the same set of questions across multiple pages or blocks.</p>"},{"location":"advanced/validation/","title":"Validation","text":"<p>Validation is a crucial aspect of survey design. It ensures that the data collected is accurate and reliable. SurveyCompo provides a range of validation options to ensure that respondents provide the correct type of input.</p>"},{"location":"advanced/validation/#input-validation","title":"Input Validation","text":"<p>Input validation is the process of ensuring that the data entered by the respondent meets specific criteria. SurveyCompo offers various validation options for different input types. These options include:</p> Type Description <code>REQUIRED</code> Ensures that the input field is not left blank. <code>NUMERIC</code> Ensures that the input field contains only numeric characters. <code>INTEGER</code> Ensures that the input field contains only integer values. <code>EMAIL</code> Ensures that the input field contains a valid email address. <code>URL</code> Ensures that the input field contains a valid URL. <code>DOMAIN</code> Ensures that the input field contains a valid domain name. <code>MAX_LENGTH</code> Enables you to specify the maximum number of characters allowed in the input field. <code>MIN_LENGTH</code> Enables you to specify the minimum number of characters allowed in the input field. <code>MAX_VALUE</code> Enables you to specify the maximum numeric value that can be entered in the input field. <code>MIN_VALUE</code> Enables you to specify the minimum numeric value that can be entered in the input field. <code>REGEX</code> Enables you to validate the input against a regular expression pattern. <code>EQUALS</code> Enables you to validate the input against a specific value. <p>To apply validation to an input, you can use the <code>validations</code> key in the Input model. The <code>validations</code> key is an array that contains one or more validation rules for the input.</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"title\": \"Create a password:\",\n          \"inputs\": [\n            {\n              \"id\": \"pwd\",\n              \"type\": \"TEXT\",\n              \"textInputType\": \"PASSWORD\",\n              \"label\": \"New Password\",\n              \"validations\": [\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"A password is required.\"\n                },\n                {\n                  \"type\": \"REGEX\",\n                  \"value\": \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).+$\",\n                  \"message\": \"Your password must include at least one uppercase letter, one lowercase letter, and one digit.\"\n                }\n              ]\n            },\n            {\n              \"type\": \"TEXT\",\n              \"textInputType\": \"PASSWORD\",\n              \"label\": \"Confirm Password\",\n              \"validations\": [\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"Confirming your password is required.\"\n                },\n                {\n                  \"type\": \"EQUALS\",\n                  \"value\": \"#pwd\",\n                  \"message\": \"The passwords do not match.\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>In the above example, the first input field requires the respondent to create a password. The input field is validated to ensure that it is not left blank and that it meets the specified regular expression pattern. The second input field is used to confirm the password. It is also validated to ensure that it is not left blank and that it matches the value entered in the first input field.</p> <p>Tip</p> <p>The <code>message</code> key is optional and can be used to provide a custom error message that will be displayed to the respondent if the validation fails. If the <code>message</code> key is not provided, a default error message will be displayed.</p> <p>The <code>EQUALS</code> validation rule is used to compare the value of the input field with the value of another input field. The value of the other input field is referenced using the <code>#</code> prefix followed by the input ID. You can also reference the value of a variable using the <code>$</code> prefix. Additionally, you can enforce that users provide a specific value by specifying the value directly. For instance, to ensure a user's agreement, a checkbox labeled 'Agree' can be configured to require a value of <code>true</code>.</p>"},{"location":"advanced/validation/#block-validation","title":"Block Validation","text":"<p>Block validation is a feature that allows you to validate multiple inputs within a block. This feature is useful when you want to ensure that a group of inputs is filled out correctly before proceeding to the next block or page. You can define block validation rules in the Block model using the <code>validations</code> key.</p> <p>The <code>validations</code> key holds an array comprising validation models applicable to the block. Below are the available validation rules:</p> Type Description <code>REQUIRED</code> Ensures at least one input in the block is not left blank. <code>MIN_SELECTION</code> The minimum number of inputs that must be selected. <code>MAX_SELECTION</code> The maximum number of inputs that must be selected. <pre><code>{\n  \"name\": \"My Survey\",\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"blocks\": [\n            {\n              \"title\": \"Please select 2 to 3 of your favorite hobbies:\",\n              \"validations\": [\n                {\n                  \"type\": \"MIN_SELECTION\",\n                  \"value\": 2\n                },\n                {\n                  \"type\": \"MAX_SELECTION\",\n                  \"value\": 3\n                }\n              ],\n              \"inputs\": [\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Reading\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Traveling\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Cooking\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Sports\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Music\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Movies\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Others\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"blocks\": [\n            {\n              \"title\": \"Preferred Contact Method:\",\n              \"validations\": [\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"Please select at least one method\"\n                }\n              ],\n              \"inputs\": [\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Email\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Phone\"\n                },\n                {\n                  \"type\": \"CHECKBOX\",\n                  \"label\": \"Postage Male\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"advanced/validation/#conditional-validation","title":"Conditional Validation","text":"<p>The Validation model supports the <code>applicableIf</code> key. This key enables you to specify a condition under which a validation rule becomes applicable. If this condition is met, the rule is applied. This feature is useful when you want to apply validation rules based on specific conditions.</p> <p>The <code>applicableIf</code> key works exactly like the <code>visibleIf</code> key; it accepts Condition Expressions as values.</p>"},{"location":"advanced/validation/#validation-example","title":"Validation Example","text":"<p>Let's look at the following example that demonstrates the use of input and block validation:</p> <p> view source</p>"},{"location":"advanced/variables/","title":"Variables","text":"<p>Variables are placeholders for values that can be used in the survey. They can be used to display information, or define conditional logic to control the flow of the survey.</p> <p>For instance, if you wish to personalize your survey by including the respondent's name, a variable can be used. This variable will hold the name and display it throughout the survey. This feature is referred as 'piping'.</p> <p>Similarly, variables can be used to tailor the survey based on the respondent's age. By passing the age as a variable, you can reference it in the conditional logic that determines which questions are shown. This way, different age groups can be presented with different sets of questions.</p> <p>To define variables in SurveyCompo, you can use the <code>variables</code> key in the model. The <code>variables</code> key is an object that contains key-value pairs. The key is the variable name, and the value is the value of the variable. The variable value can be a string, number, or boolean.</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"pages\": [\n    /* ... */\n  ],\n  \"variables\": {\n    \"name\": \"John Doe\",\n    \"age\": 25\n  }\n}\n</code></pre> <p>Tip</p> <p>Adhering to a variable naming convention is highly recommended. It is best to use lowercase letters for variable names and avoid special characters. Variable names can not contain spaces.</p> <p>The upcoming two sections will cover the usage of variables in the context of piping and condition.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/","title":"Building Web Forms Without the Hassle \u2013 A Guide to SurveyCompo","text":"<p>Imagine you're a startup founder with a great idea, but you need to gauge interest from potential users. Or maybe you're a small business owner looking to create a simple contact form for customer support requests. You don't have a full CRM system yet, and you don't need one. What you need is a straightforward form that captures essential user input, notifies you upon submission, and stores the data for later use. Sound familiar?</p> <p></p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#the-challenge","title":"The Challenge","text":"<p>As simple as it seems, this task is often more complex than expected.</p> <p>You could build the form yourself, but it involves more than just a bit of HTML. You\u2019ll need a backend server to handle the data, a database to store it, and a mechanism to download the data and send notifications when the form is submitted. What seemed like a quick task quickly turns into a complex project, consuming valuable time that could be better spent on your core business.</p> <p>CRM/CMS solutions might offer these features, but they come bundled with other tools and are often expensive, complex, and time-consuming to set up. You don\u2019t need a full CRM\u2014just a simple form.</p> <p>That's where SurveyCompo comes in \u2013\u2013 a versatile survey tool that offers flexibility and customization options. With SurveyCompo, you can create a form, collect submissions, and receive notifications with ease.</p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#introducing-surveycompo","title":"Introducing SurveyCompo","text":"<p>SurveyCompo is a tool designed to render surveys and forms based on JSON data, allowing for easy customization and embedding. It offers both hosted and self-hosted solutions to cater to different needs. With SurveyCompo, you can:</p> <ul> <li>Create and customize forms/surveys easily</li> <li>Publish and embed them on your webpage</li> <li>Capture form submissions and receive notifications via webhooks</li> <li>Download submitted data for further analysis</li> </ul> <p>And the best part? SurveyCompo offers a free plan to get you started!</p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#step-by-step-guide-to-setting-up-your-surveycompo-form","title":"Step-by-Step Guide to Setting Up Your SurveyCompo Form","text":"<p>Here's how to set up your form with SurveyCompo in just a few steps:</p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#1-register-a-surveycompo-account","title":"1. Register a SurveyCompo Account","text":"<p>Begin by registering for a free SurveyCompo account. The registration process is quick and easy, and you'll gain access to all the tools you need to create your form.</p> <p></p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#2-create-your-formsurvey","title":"2. Create Your Form/Survey","text":"<p>Once logged in, navigate to the dashboard and click on \"New Survey.\" Name your form and select the 'Basic Survey' template. For this example, we'll name the form 'Pre-launch Sign-up Form'.</p> <p></p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#3-design-your-form","title":"3. Design your Form","text":"<p>After creating the form, you can design it by updating and adding the fields you need in the Survey Builder interface.</p> <p>In this example, we'll use a single page with name and email inputs. Since the form is based on a template, we'll remove the start screen and replace the default question with the name and email fields.</p> <p>SurveyCompo supports various features and customization options, including different input types, validations, conditional logic, and themes. You can explore these features in the SurveyCompo documentation to create a form that suits your needs.</p> <p>We've added some special traits to make the form more user-friendly and visually appealing when embedding it on a webpage. We disabled the padding around the form, set the primary color to match the brand, disabled the full-width buttons, hid both the progress label and navigation buttons, and used 'memory' for caching.</p> <p>You can quickly get started by copying and pasting the following JSON code into the Survey Builder:</p> PreviewSurvey BuilderJSON <p></p> <p></p> <pre><code>{\n  \"name\": \"Pre-launch Sign-up Form\",\n  \"uiUseFullWidthButtons\": false,\n  \"uiResponsiveFooterbar\": false,\n  \"uiUsePadding\": false,\n  \"uiShowNavigation\": false,\n  \"uiShowProgress\": false,\n  \"pages\": [\n    {\n      \"vCentered\": false,\n      \"hCentered\": false,\n      \"blocks\": [\n        {\n          \"showIndexNumber\": false,\n          \"inputs\": [\n            {\n              \"type\": \"TEXT\",\n              \"hint\": \"Your Name\",\n              \"id\": \"name\",\n              \"validations\": [\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"Please enter your name.\"\n                }\n              ]\n            },\n            {\n              \"type\": \"TEXT\",\n              \"textInputType\": \"EMAIL\",\n              \"id\": \"email\",\n              \"hint\": \"Email Address\",\n              \"validations\": [\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"Please enter your Email address.\"\n                },\n                {\n                  \"type\": \"EMAIL\",\n                  \"message\": \"Please enter a valid Email address.\"\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"nextButtonLabel\": \"Get Notified\"\n    }\n  ],\n  \"completeScreens\": [\n    {\n      \"header\": \"Thank you for your interest!\",\n      \"description\": \"We'll keep you updated on our progress and notify you when we launch.\"\n    }\n  ],\n  \"theme\": {\n    \"primaryColor\": \"#6b63fe\",\n    \"defaultRadius\": \"2em\",\n    \"fontFamily\": \"inherit\",\n    \"textColor\": \"#5d5d5d\"\n  }\n}\n</code></pre>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#4-publish-the-survey","title":"4. Publish the Survey","text":"<p>After customizing your form, it's time to publish it. Click on the \"Publish\" button on the \"Publish &amp; Share\" page and choose the appropriate settings.</p> <p>SurveyCompo offers both hosted and self-hosted solutions. Self-hosted options are ideal for users who want full control over their data, while hosted solutions are great for those who prefer a hands-off approach. In this example, we'll choose to let SurveyCompo host the survey for us. Copy the Source URL for later use.</p> <p></p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#5-embed-the-form-on-your-webpage","title":"5. Embed the Form on Your Webpage","text":"<p>Embedding your form on your website is simple with SurveyCompo. Click the 'Embed' button to view the code needed to embed your form. Our example code includes a script tag to load the SurveyCompo library and a custom HTML tag to render the form:</p> <pre><code>&lt;div class=\"myForm\"&gt;\n  &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n  &lt;survey-compo src=\"cZ05J4Mo4NQoPjY1Em8I\" cache=\"memory\" /&gt;\n&lt;/div&gt;\n</code></pre> <p>For demonstration purposes, we used a simple landing page from Codepen and created a fork to add the form.</p> <p>This is how it looks (see full page view):</p> <p> See the Pen    Landing Page Example by SurveyCompo (@surveycompo)   on CodePen. </p> <p>Please feel free the explore the code and customize it to fit your needs.</p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#6-add-a-webhook-for-slack-notifications","title":"6. Add a Webhook for Slack Notifications","text":"<p>To receive notifications when a form is submitted, set up a webhook. In this example, we'll use Slack notifications.</p> <p>First, create a webhook in your Slack workspace. Slack provides a simple process for creating a webhook, detailed in the Slack API documentation. Follow the steps to create a webhook URL, which should look something like this: <code>https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX</code>.</p> <p>Next, set up the webhook in SurveyCompo. Navigate to the \"Settings\" section in your SurveyCompo dashboard, create a new webhook, and paste the Slack webhook URL you created earlier. Save the webhook.</p> <p></p> <p>Now, whenever a user submits the form, you'll receive a notification in your Slack channel.</p> <p></p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#7-download-submitted-data","title":"7. Download Submitted Data","text":"<p>Finally, accessing the data submitted through your form is straightforward. Go to the \"Responses\" section in your SurveyCompo dashboard, where you can download all submissions in various formats (e.g., CSV, JSON) for easy analysis or record-keeping.</p> <p></p>"},{"location":"blog/2024/08/13/building-web-forms-without-the-hassle-a-guide-to-surveycompo/#conclusion","title":"Conclusion","text":"<p>SurveyCompo simplifies the process of creating, customizing, and managing web forms, making it a great tool for startups and small businesses. Whether you need to capture early user interest, handle customer support requests, or gather any other type of data, SurveyCompo offers a simple, flexible, and cost-effective solution.</p> <p>For more information, visit the SurveyCompo homepage or check out the SurveyCompo documentation for detailed guides and tips.</p>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/","title":"Navigating the Survey Tool Landscape \u2013 Choosing the Right Solution for Your Needs","text":"<p>Surveys are essential tools for gathering insights, feedback, and data from various audiences. In the market today, there are two primary types of survey services: fully hosted and analytics platforms (like SurveyMonkey, Qualtrics, and Typeform), and client-side libraries (like SurveyJS, Formik, and VeeValidate.). Each type has its own set of advantages and ideal use cases. Let\u2019s break down these options and see how they compare.</p> <p></p>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#hosted-platforms","title":"Hosted Platforms","text":"<p>Fully hosted services, such as SurveyMonkey, Qualtrics, and Typeform, offer a comprehensive solution for creating, distributing, and analyzing surveys. These platforms provide an interactive survey builder UI, which allows users to create surveys without any coding knowledge. Each survey is assigned a unique URL for collecting responses, or it can be embedded into webpages via an iframe.</p>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#pros","title":"Pros:","text":"<ul> <li>Ease of Use: No coding skills are required. The drag-and-drop interface makes survey creation straightforward.</li> <li>Data Collection: These platforms handle all data collection and storage, providing users with easy access to downloadable response data.</li> <li>Real-Time Integration: Webhooks allow for real-time data capture and integration with other systems.</li> <li>Analytics: Built-in analytics tools help users quickly interpret the collected data.</li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#cons","title":"Cons:","text":"<ul> <li>Limited Customization: Customizing the survey interface beyond the provided templates can be challenging.</li> <li>Data Control: Users must trust the platform to handle their data securely and in compliance with privacy regulations.</li> <li>Cost: Premium features often come with a subscription fee, which can add up for frequent users.</li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#best-use-cases","title":"Best Use Cases:","text":"<ul> <li>Quick deployment of surveys with minimal technical effort.</li> <li>Gathering feedback from large audiences with built-in analysis tools.</li> <li>Organizations needing a no-code solution to conduct surveys efficiently.</li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#client-side-survey-libraries","title":"Client-Side Survey Libraries","text":"<p>Client-side libraries, like SurveyJS, Formik, and VeeValidate, provide the code needed to build survey user interfaces within client-side frameworks such as React.js, Vue.js and JQuery. These libraries require users to be technically competent, as they must integrate the library into their own projects.</p>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#pros_1","title":"Pros:","text":"<ul> <li>Flexibility: Users can fully customize the survey experience to fit their specific requirements.</li> <li>Integration: Seamless integration into existing client-side projects.</li> <li>Control: Full control over survey data, including how it\u2019s processed and stored.</li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#cons_1","title":"Cons:","text":"<ul> <li>Technical Knowledge: Requires coding skills and understanding of the client-side framework.</li> <li>Complex Setup: Setting up and maintaining the survey interface can be time-consuming.</li> <li>Data Management: Users must handle data storage and processing themselves, which can be a significant responsibility.</li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#best-use-cases_1","title":"Best Use Cases:","text":"<ul> <li>Projects requiring highly customized survey interfaces.</li> <li>Teams with technical expertise looking to integrate surveys deeply into their applications.</li> <li>Situations where full control over survey data and user interaction is essential.</li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#introducing-surveycompo-the-best-of-both-worlds","title":"Introducing SurveyCompo: The Best of Both Worlds","text":"<p>SurveyCompo is a web component designed specifically for surveys, merging the ease of use of hosted platforms with the flexibility of client-side libraries.</p>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#key-features","title":"Key Features:","text":"<ol> <li> <p>Web Component Design: SurveyCompo is a standalone web component that renders JSON data into an interactive user interface. It works independently of any framework but can also integrate seamlessly with various frameworks like React, Angular, and Vue. This makes it highly versatile and easy to implement without extensive coding.</p> </li> <li> <p>Self-Hosted and Hosted Options: SurveyCompo offers both self-hosted and hosted options. Users can opt to manage their data, ensuring full control and compliance with privacy regulations. Alternatively, SurveyCompo can handle data collection, providing a traditional hosted service experience.</p> </li> <li> <p>Real-Time Interaction: One of SurveyCompo\u2019s standout features is its ability to provide real-time event data to the hosting environment. This allows for dynamic interactions, such as customizing the user experience based on responses or integrating survey data with other analytics tools in real-time.</p> </li> <li> <p>Programmable JSON Data Model: The JSON data model of SurveyCompo is simple yet powerful. It enables integration with various systems, including AI-enabled survey generators, and supports advanced survey types like micro-surveys and retargeting surveys.</p> </li> </ol>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#why-choose-surveycompo","title":"Why Choose SurveyCompo?","text":"<ul> <li>Flexibility with Less Coding: Unlike traditional client-side libraries, SurveyCompo requires less coding and prerequisite skills, making it accessible to a broader audience while still offering deep customization.</li> <li>Control and Security: With self-hosting options, users maintain full control over their data, ensuring it never goes to a third party unless desired.</li> <li>Enhanced User Engagement: The real-time event system allows for dynamic, responsive survey experiences that can adapt based on user input, providing a richer interaction and better data quality.</li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#real-world-examples","title":"Real-World Examples","text":"<p>SurveyCompo\u2019s versatility and flexibility make it an ideal solution for a wide range of use cases. Here are a few examples of how SurveyCompo can be used in real-world scenarios:</p> <ul> <li> <p>A marketing agency uses SurveyCompo to create customized survey experiences for their clients, integrating with their existing CRM system for seamless data flow.</p> </li> <li> <p>A researcher uses SurveyCompo to collect real-time feedback from participants, adjusting the survey experience based on responses.</p> </li> <li> <p>A business uses SurveyCompo to create AI-driven surveys, personalizing the experience for each customer based on their preferences and behavior.</p> </li> </ul>"},{"location":"blog/2024/08/06/choosing-the-right-solution-for-your-survey-needs/#conclusion","title":"Conclusion","text":"<p>Choosing the right survey tool depends on your specific needs and capabilities. Fully hosted platforms are ideal for quick, no-code survey deployment with built-in analytics. Client-side libraries offer unparalleled customization and integration for technically adept users. SurveyCompo bridges the gap between these two worlds, providing a flexible, powerful, and user-friendly solution for all your survey needs. Whether you need full control over your data or a robust, interactive survey experience, SurveyCompo has you covered.</p>"},{"location":"blog/2024/10/01/visual-survey-editor/","title":"Introducing the Visual Survey Editor - A New Era of Survey Building with SurveyCompo","text":"<p>At SurveyComp, we are always striving to make survey creation as smooth and flexible as possible for our users. Today, we're excited to announce the launch of a powerful new feature in SurveyCompo: the Visual Survey Editor.</p> <p>Building surveys has never been easier. Whether you're creating simple questionnaires or complex, multi-page surveys, the Visual Survey Editor provides an intuitive, graphical interface that simplifies the entire process. Let\u2019s take a closer look at how this new feature will enhance your survey-building experience.</p> <p></p>"},{"location":"blog/2024/10/01/visual-survey-editor/#the-power-of-drag-and-drop-survey-building-made-simple","title":"The Power of Drag-and-Drop: Survey Building Made Simple","text":"<p>Gone are the days of having to work exclusively with JSON code to create surveys. The Visual Survey Editor allows you to drag and drop essential survey components\u2014pages, blocks (survey questions), and inputs (choices and text inputs)\u2014directly into your survey. This streamlined process empowers anyone, regardless of coding experience, to build professional surveys in minutes.</p> <p>The tree structure of the editor ensures that all components are neatly organized, making it easy to understand the overall structure of your survey. You can see at a glance how pages, questions, and inputs are arranged, giving you full control over your survey design.</p>"},{"location":"blog/2024/10/01/visual-survey-editor/#reorder-customize-and-fine-tune-with-ease","title":"Reorder, Customize, and Fine-Tune with Ease","text":"<p>The new Visual Editor isn\u2019t just about dragging and dropping components. You also have the power to reorder, duplicate, delete, and edit elements with just a few clicks. Whether you need to move a page up, tweak a question block, or add new inputs, everything is simple and straightforward.</p> <p>When you click on a survey element, a pop-up form appears, allowing you to fill in crucial details like text titles, headers, and labels. You can also set up input validation rules and specify conditional logic to ensure your survey runs exactly the way you intend.</p>"},{"location":"blog/2024/10/01/visual-survey-editor/#advanced-features-for-a-seamless-workflow","title":"Advanced Features for a Seamless Workflow","text":"<p>The Visual Survey Editor comes equipped with advanced features that make it more than just a tool for beginners. For those creating complex surveys, you\u2019ll appreciate the following functionalities:</p> <ul> <li>Undo/Redo: Made a change you didn\u2019t mean to? No problem! With the undo and redo options, you can quickly backtrack or reapply changes without losing any of your work.</li> <li>Search: Quickly locate specific survey elements in large, complex surveys using the search function. No more scrolling through endless pages!</li> <li>Collapse/Expand Tree Branches: Manage long or multi-page surveys more effectively by collapsing and expanding tree branches, allowing you to focus on specific parts of your survey design.</li> </ul>"},{"location":"blog/2024/10/01/visual-survey-editor/#a-perfect-blend-the-visual-editor-and-the-json-editor","title":"A Perfect Blend: The Visual Editor and the JSON Editor","text":"<p>For users who are already familiar with SurveyCompo\u2019s powerful JSON editor, don\u2019t worry\u2014it\u2019s not going anywhere! The JSON editor remains the go-to option for handling advanced customizations and complex setups. The Visual Survey Editor complements it by offering a more user-friendly option for quick edits, making survey creation accessible to everyone.</p> <p>You can easily switch between the two, giving you complete flexibility depending on your project\u2019s needs. Whether you\u2019re making rapid adjustments in the Visual Editor or diving deep into advanced logic in the JSON editor, SurveyCompo has you covered.</p>"},{"location":"blog/2024/10/01/visual-survey-editor/#who-will-benefit-from-the-visual-survey-editor","title":"Who Will Benefit from the Visual Survey Editor?","text":"<p>The Visual Survey Editor is perfect for both newcomers and experienced users alike.</p> <ul> <li>For beginners, it offers an approachable way to build surveys without needing to touch a single line of code.</li> <li>For experienced users, the drag-and-drop interface can significantly speed up the workflow, while the JSON editor remains available for more complex use cases.</li> </ul> <p>This editor bridges the gap between ease of use and full customization, making it an ideal tool for anyone looking to build or improve their surveys.</p>"},{"location":"blog/2024/10/01/visual-survey-editor/#getting-started-with-the-visual-survey-editor","title":"Getting Started with the Visual Survey Editor","text":"<p>Ready to start using the Visual Survey Editor? Simply log into your SurveyComp account, head to the Survey Builder section, and select \"Visual Builder\" when creating or editing your survey. You\u2019ll be amazed at how quickly you can bring your survey ideas to life!</p>"},{"location":"customization/css/","title":"Css","text":"<p>While themes provide a simple way to modify your survey's appearance, you might require more granular customizations.</p> <p>SurveyCompo allows you to refine your survey's look using CSS. This enables you to adjust the size, position, and style of survey elements to align with your brand's aesthetic. With CSS, you can make more precise changes to the survey's appearance, such as tweaking the font, color, and layout.</p>"},{"location":"customization/css/#css-rules-in-the-survey-json","title":"CSS Rules in the Survey JSON","text":"<p>To apply CSS to your survey, you can utilize the <code>css</code> key in the survey's JSON model. The <code>css</code> attribute accepts a string containing CSS rules that will be applied to the survey. Here's an example of how you can use the <code>css</code> attribute to alter the background color for checkbox inputs:</p> JSONPreview <pre><code>{\n  /* ... */\n   \"css\": \".sc-survey { background-image: url('https://surveycompo.github.io/examples/images/background.jpg'); background-repeat: no-repeat; background-attachment: fixed; background-size: 100% 100%;}\",\n}\n</code></pre> <p> </p> <p> view source</p>"},{"location":"customization/css/#css-rules-from-the-hosting-page","title":"CSS Rules from the Hosting Page","text":"<p>While embedding CSS rules directly into the survey JSON data is possible, it is not a good approach for complex or lengthy CSS rules. To address this, SurveyCompo allows you to reference a CSS style tag from the hosting page. This way, you can keep your CSS rules separate from the survey data, making them easier to manage and maintain.</p> <p>To reference a CSS style tag, add a <code>&lt;style&gt;</code> tag to the hosting page's HTML with an <code>id</code> value of <code>surveycompo</code>. It's recommended to place this <code>&lt;style&gt;</code> tag in the <code>&lt;head&gt;</code> section of the HTML document. Here's an example of how you can reference a CSS style tag from the hosting page:</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n    &lt;style id=\"surveycompo\" media=\"not all\"&gt;\n      .sc-checkbox,\n      .sc-checkbox-text {\n        background-color: white;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo src=\"[Survey ID or URL]\"&gt;&lt;/survey-compo&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In this example, the CSS rules for changing the background color of checkbox inputs are placed inside the <code>&lt;style&gt;</code> tag with an <code>id</code> value of <code>surveycompo</code>. SurveyCompo will automatically apply these CSS rules to the survey when it is rendered.</p> <p>Tip</p> <p>Adding <code>media=\"not all\"</code> to the style tag ensures that the CSS rules are not applied to the hosting page. This way, the CSS rules are only applied to the survey and do not interfere with the rest of the webpage.</p> <p>Note</p> <p>CSS rules specified in the survey JSON <code>css</code> key have higher priority than the CSS rules defined in the <code>&lt;style&gt;</code> tag. Furthermore, CSS rules in the <code>&lt;style&gt;</code> tag override the theme styles of the survey. This hierarchy allows you to override specific styles for individual surveys while maintaining a consistent appearance across multiple surveys.</p> <p>Below are the CSS class names that you can utilize to customize the survey. These class names allow you to apply CSS rules to specific elements within the survey:</p> Selector CSS Class Description <code>:host</code> SurveyCompo component. Useful for setting <code>font-*</code> style. <code>sc-spinner</code> Loading spinner icon. Useful for adjusting spinner size and color. <code>sc-survey</code> Wrapper for the whole survey component. Useful for Customized background. <code>sc-survey__close-btn</code> Survey close button. Useful for customizing location and style. <code>sc-btn</code> Buttons on Page and Screen <code>sc-btn--primary</code> Primary button. <code>sc-btn--disabled</code> Disabled button. <code>sc-btn--secondary</code> Secondary button. <code>sc-screen</code> Survey screen. <code>sc-screen__btn-container</code> Screen button container. <code>sc-screen__btn</code> Screen button. <code>sc-screen__btn--ok</code> Screen OK button. <code>sc-screen__btn--cancel</code> Screen cancel button. <code>sc-screen__btn--start</code> Start screen button. <code>sc-screen__btn--abort</code> Abort screen button. <code>sc-screen__btn--complete</code> Complete screen button. <code>sc-screen__header</code> Screen header. <code>sc-screen__header--start</code> Start screen header. <code>sc-screen__header--abort</code> Abort screen header. <code>sc-screen__header--complete</code> Complete screen header. <code>sc-screen__description</code> Screen description. <code>sc-screen__description--start</code> Start screen description. <code>sc-screen__description--abort</code> Abort screen description. <code>sc-screen__description--complete</code> Complete screen description. <code>sc-screen__footer</code> Screen footer. <code>sc-screen__footer--start</code> Start screen footer. <code>sc-screen__footer--abort</code> Abort screen footer. <code>sc-screen__footer--complete</code> Complete screen footer. <code>sc-nav</code> Navigator. <code>sc-nav__btn-container</code> Navigation button container. <code>sc-nav__btn</code> Navigation button. <code>sc-nav__btn--disabled</code> Navigation button (disabled). <code>sc-nav__btn--prev</code> Navigation previous page button. <code>sc-nav__btn--next</code> Navigation next page button. <code>sc-nav__progress</code> Navigation progress label. <code>sc-page-container</code> Survey page container. Adjust page animation. <code>sc-page</code> Survey page. Adjust padding, width, alignment etc. <code>sc-page__header</code> Survey page header. <code>sc-page__description</code> Survey page description. <code>sc-page__footer</code> Survey page footer. <code>sc-page__btn</code> Survey page button. <code>sc-block</code> Survey block container. <code>sc-block__index</code> Survey block index. <code>sc-block__title</code> Survey block title. <code>sc-block__subtitle</code> Survey block subtitle. <code>sc-block__description</code> Survey block description. <code>sc-block__error</code> Survey block error text. <code>sc-block__footnote</code> Survey block footnote. <code>sc-input__label</code> Input label. <code>sc-input__hint</code> Input hint. <code>sc-input__error</code> Input error. <code>sc-matrix</code> Likert Matrix container. <code>sc-matrix__label</code> Likert Matrix input label. <code>sc-matrix__scale</code> Likert Matrix scale label. <code>sc-matrix__input</code> Likert Matrix input control (radio button). <code>sc-checkbox</code> Checkbox input container. <code>sc-checkbox__label</code> Checkbox input label. <code>sc-checkbox__input</code> Checkbox input control (checkbox button). <code>sc-checkbox-text</code> CheckboxText input container. <code>sc-checkbox-text__text</code> CheckboxText input text box control <code>sc-checkbox-text__input</code> CheckboxText input checkbox control <code>sc-radio</code> Radio input container. <code>sc-radio__label</code> Radio input label. <code>sc-radio__input</code> Radio input control (radio button). <code>sc-radio-text</code> RadioText input container. <code>sc-radio-text__text</code> RadioText input text box control <code>sc-radio-text__input</code> RadioText input radio control <code>sc-star</code> Star rating input container. <code>sc-star__label</code> Star rating input label. <code>sc-star__input</code> Star rating input control (star buttons). <code>sc-star__icon</code> Star rating star icon. <code>sc-number</code> Number scale input container. <code>sc-number__label</code> Number scale input label. <code>sc-number__scale</code> Number scale input scale label. <code>sc-number__input</code> Number scale input control (number button). <code>sc-likert</code> Likert input container <code>sc-likert__label</code> Likert input label <code>sc-likert__option</code> Likert option label <code>sc-likert__input</code> Likert input control (radio button). <code>sc-text</code> Text input container. <code>sc-text__label</code> Text input label. <code>sc-text__input</code> Text input control (text box). <code>sc-textarea</code> Textarea input container. <code>sc-textarea__label</code> Textarea input label. <code>sc-textarea__input</code> Textarea input control (textarea box). <code>sc-toggle</code> Toggle input container. <code>sc-toggle__label</code> Toggle input label. <code>sc-toggle__input</code> Toggle input control (toggle button). <code>sc-dropdown</code> Dropdown input container. <code>sc-dropdown__label</code> Dropdown input label. <code>sc-dropdown__input</code> Dropdown input control. <code>sc-image</code> Image input container. <code>sc-image__label</code> Image input label. <code>sc-image__input</code> Image input control (image). <code>sc-image__check-mark</code> Image input check mark. <p>Tip</p> <p>The <code>:host</code> CSS selector is primarily used for setting global font styles and base font size. For other global styles such as background color and spacing, use the <code>.sc-survey</code> CSS selector.</p> <p>Tip</p> <p>When customizing with CSS rules, it's recommended to use <code>em</code> units for spacing, sizing and positioning. This ensures that the survey elements retain their relative proportions when SurveyCompo adjusts the UI to fit different screen sizes.</p>"},{"location":"customization/css/#css-limitation","title":"CSS Limitation","text":"<p>There are a few limitations to be aware of when using CSS with SurveyCompo:</p> <ul> <li>Does not support stylesheets from external URLs.</li> <li>Supports applying CSS rules from only one static <code>style</code> HTML tag.</li> </ul>"},{"location":"customization/custom-html/","title":"Custom HTML","text":"<p>All text elements within a screen (header, description, footer), a page (header, description, footer), and a block (title, subtitle, description, footnote) support custom HTML, enabling a wide range of customization:</p> <ul> <li>Enhanced Formatting: Modify font size, color, or add emphasis using HTML tags.</li> <li>Embedding Media: Incorporate images, videos, or audio files to enrich the user experience.</li> <li>Interactive Elements: Add links to privacy statements or cookie policies.</li> </ul> <p>SurveyCompo uses specific 'html' keys for custom content:</p> <ul> <li><code>htmlHeader</code></li> <li><code>htmlDescription</code></li> <li><code>htmlFooter</code></li> <li><code>htmlTitle</code></li> <li><code>htmlSubtitle</code></li> <li><code>htmlFootnote</code></li> </ul> <p>For a detailed list of keys applicable to screens, pages, and blocks, please refer to the Data Models section in the documentation.</p> <p>Warning</p> <p>Ensure that you use correct HTML syntax and prioritize security. Be cautious not to include code from untrusted sources or user input, as it could potentially introduce security risks.</p> <p>The following example demonstrates how to use HTML to add a logo to the start screen:</p> JSONPreview <pre><code>{\n    /* ... */\n    \"css\": \"#mylogo { width: 10em; display: inline; color: red}\",\n    \"startScreens\": [\n      {\n        \"header\": \"Your Feedback on SurveyCompo\",\n        \"description\": \"Share your thoughts and shape the future of SurveyCompo!\",\n        \"okButtonLabel\": \"Start Survey\",\n        \"htmlFooter\": \"Powered by: &lt;img id='mylogo' onclick=\\\"alert('SurveyCompo Rocks!')\\\" src='https://www.surveycompo.com/logos/title-dark.min.svg' /&gt;\"\n      }\n    ]\n}\n</code></pre> <p></p> <p>Tip: Applying CSS to Custom HTML Elements</p> <p>You can apply CSS rules to custom HTML elements using the <code>css</code> key or <code>&lt;style&gt;</code> tag. For instance, assign an <code>id</code> attribute to your custom HTML element and reference it in the CSS rules to apply custom styles.</p> <p>Tip: Invoking JavaScript Functions from Custom HTML Elements</p> <p>You can invoke JavaScript functions from custom HTML elements using HTML event attributes such as <code>onclick</code>. This enables you to trigger custom actions when users interact with the survey. However, ensure that the JavaScript functions are defined on the hosting page or are accessible to the survey.</p> <p>Note</p> <p>For security reasons and to prevent potential vulnerabilities, <code>&lt;script&gt;</code> tags in custom HTML are not evaluated.</p>"},{"location":"customization/layout/","title":"Layout","text":""},{"location":"customization/layout/#block-layout","title":"Block Layout","text":"<p>SurveyCompo allows you to customize the layout of blocks within a survey. You can adjust the layout of blocks to create a visually appealing and user-friendly survey. The layout of blocks can be customized using the <code>layout*</code> keys in the block's JSON model.</p> <p>Inputs that are of the same type are grouped together and shown in a grid layout. By default, these inputs are lined up in a row, starting from the left and moving to the right. If there isn't enough space in a row for all inputs, they will continue on the next row.</p> <p></p> <p>However, it may appear as if the inputs are displayed in a single column. This is because all inputs have a default width of '100%'.</p> <p></p> <p>This default layout works well for most survey questions. You also can customize the block layout to display inputs in multiple columns.</p>"},{"location":"customization/layout/#layoutcolumncount","title":"<code>layoutColumnCount</code>","text":"<p>By default, <code>layoutColumnCount</code> is set to <code>0</code>, which means the layout engine will try to fit as many items (columns) as possible in a row. If you set <code>layoutColumnCount</code> to a value greater than 0, the layout engine will arrange the inputs into the specified number of columns. If there isn't enough horizontal space, a horizontal scroll bar will appear. Therefore, using a fixed number of columns is best suited for blocks with a small number of short inputs and is not recommended if you want a responsive design.</p>"},{"location":"customization/layout/#layoutcolumnwidth","title":"<code>layoutColumnWidth</code>","text":"<p>Setting <code>layoutColumnCount</code> to <code>0</code> allows the layout engine to dynamically adjust the number of columns. If you prioritize responsiveness, you can keep <code>layoutColumnCount</code> at 0 and use the <code>layoutColumnWidth</code> key to define the width of each column. This lets the layout engine adapt the number of columns based on the available space and the specified column width.</p> <p>If you want to display inputs in a given number of columns, you can also set the <code>layoutColumnWidth</code> to a percentage value that allows multiple columns to fit within the 100% width of the block. for example, if you want to display inputs in 2 columns, you can set the <code>layoutColumnWidth</code> to <code>50%</code>. and if you want to display inputs in 3 columns, you can set the <code>layoutColumnWidth</code> to <code>33%</code>. The layout engine will then automatically adjust the number of columns based on the available space, taking into account the gaps between columns.</p> <p>If you set a percentage value for <code>layoutColumnWidth</code> that is larger than 50%, the layout engine will display the inputs in a single column.</p> <p>Lastly, if you set a value for <code>layoutColumnWidth</code> that exceeds the available space, for example, 110%, a horizontal scroll bar will appear. This is because the layout engine tries to accommodate the specified column width, even if it exceeds the available space.</p>"},{"location":"customization/layout/#layoutcolumnautofit","title":"<code>layoutColumnAutoFit</code>","text":"<p>When <code>layoutColumnCount</code> is set to <code>0</code>, the layout engine has the flexibility to adjust the column widths. By default, it will automatically optimize the column widths to fill the entire horizontal space. For instance, if you set <code>layoutColumnWidth</code> to <code>60%</code>, the layout engine will display inputs in a single column with full width (100%) instead of the specified 60% width. To prevent this automatic adjustment, set <code>layoutColumnAutoFit</code> to <code>false</code>.</p> <p>Please note that <code>layoutColumnAutoFit</code> is only effective when <code>layoutColumnCount</code> is set to <code>0</code>. If you've specified a certain number of columns using <code>layoutColumnCount</code>, the layout engine will adhere to the specified column width, regardless of the <code>layoutColumnAutoFit</code> setting.</p>"},{"location":"customization/layout/#layoutflow","title":"<code>layoutFlow</code>","text":"<p>The <code>layoutFlow</code> key controls the direction in which the inputs are displayed within a multi-column layout. By default, <code>layoutFlow</code> is set to <code>ROW</code>, which means the inputs are arranged in a row from left to right. If you change <code>layoutFlow</code> to <code>COLUMN</code>, the inputs will be arranged in a column from top to bottom.</p> <p></p> <p>However, if you set <code>layoutColumnCount</code> to <code>0</code> and <code>layoutFlow</code> to <code>COLUMN</code>, the layout engine will display the inputs in a single column, regardless of the available space. This is because the layout engine is instructed to place each input below the previous one.</p> <p>Therefore, the <code>COLUMN</code> layout flow is only useful when <code>layoutColumnCount</code> is given an explicit value.</p>"},{"location":"customization/layout/#input-layout","title":"Input layout","text":"<p>Input layout configuration is more straightforward compared to block layout. Two keys primarily control the layout of an input: <code>labelPosition</code> and <code>labelWidth</code>.</p> <p><code>labelPosition</code> determines the placement of the label relative to the input control. SurveyCompo assigns a sensible default value based on the input type. For most input types, the label is positioned at the <code>TOP</code> of the input control. However, for <code>IMAGE</code> controls, the default label position is <code>BOTTOM</code>.</p> <p><code>labelWidth</code> controls the width of the label. By default, it's set to <code>100%</code>, meaning the label will occupy the full width of the input control. You can adjust this to a fixed value (like <code>200px</code>) or a percentage value (like <code>50%</code>). The <code>labelWidth</code> key is crucial for aligning inputs within a block.</p> <p>The following example illustrates how <code>labelWidth</code> affects the alignment of inputs within a block:</p> Without Using <code>labelWidth</code>With <code>labelWidth</code> Set to <code>10em</code>JSON <p></p> <p></p> <pre><code>{\n    /* ... */\n    \"blocks\": [\n      {\n        \"title\": \"Please rate the following aspects of SurveyCompo.\",\n        \"inputs\": [\n          {\n            \"type\": \"STAR_SCALE\",\n            \"label\": \"Ease of Use:\",\n            \"labelPosition\": \"LEFT\",\n            \"labelWidth\": \"10em\"\n          },\n          {\n            \"type\": \"STAR_SCALE\",\n            \"label\": \"Value for money:\",\n            \"labelPosition\": \"LEFT\",\n            \"labelWidth\": \"10em\"\n          },\n          {\n            \"type\": \"STAR_SCALE\",\n            \"label\": \"Customer support:\",\n            \"labelPosition\": \"LEFT\",\n            \"labelWidth\": \"10em\"\n          }\n        ]\n      }\n    ]\n}\n</code></pre> <p>Tip</p> <p>The Likert Matrix involves multiple inputs within a block. To adjust the width of the label for each scale in the Likert Matrix, use the block key <code>layoutLikertMatrixLabelWidth</code>.</p>"},{"location":"customization/overview/","title":"Style Overview","text":"<p>As a web component, SurveyCompo offers many customization options. This section covers the available customization options in SurveyCompo, including themes, CSS, spacing, custom HTML, and block layout. You'll learn how to use these options to create visually appealing and user-friendly surveys that suit your audience.</p>"},{"location":"customization/overview/#style-encapsulation","title":"Style Encapsulation","text":"<p>SurveyCompo uses Shadow DOM to keep its internal styles separate. This keeps the appearance of SurveyCompo surveys independent from the rest of the webpage and prevents the webpage's styles from interfering with the survey's look. This is particularly useful when embedding surveys in websites with complex styles.</p> <p>You might wonder how to customize the appearance of the survey if the styles are encapsulated.</p> <p>You can still apply CSS styles to the top-level SurveyCompo component as if it were a standard HTML element. You can set the size and position of the component, add borders to the survey, and set the font family and size.</p> <p>SurveyCompo also allows applying a special CSS stylesheet to the survey. This stylesheet can contain custom styles for the survey components, such as changing the color of the buttons or the background color of the survey. Additionally, the survey JSON model supports a theme object that allows customization of the survey's appearance using predefined theme properties.</p>"},{"location":"customization/overview/#where-to-put-the-custom-styles","title":"Where To Put The Custom Styles","text":"<p>There are two ways to apply custom styles to the survey:</p> <ol> <li> <p>On the hosting page: You can apply custom styles to the survey component or its container using CSS. This allows you to customize the appearance of the survey to match the design of the hosting page.</p> </li> <li> <p>In the survey JSON model: You can define custom styles in the JSON model of the survey. This allows you to define the survey's appearance and behavior in a portable way that can be shared and reused across different platforms.</p> </li> </ol>"},{"location":"customization/overview/#custom-style-on-the-hosting-page","title":"Custom Style On The Hosting Page","text":"<p>SurveyCompo surveys are represented as a single HTML element that can be easily added to a webpage. You can apply CSS styles to this element to customize the size, position, background, and fonts of the survey.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;survey-compo src=\"./source.json\" style=\"width: 400px; height: 100%; margin: auto; font-size: 14px;\"&gt;&lt;/survey-compo&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Since surveys take up 100% width and height with a transparent background by default, you can also apply styles to the container of the survey component to change the position and size of the survey.</p> <p>To customize the inner elements of the survey, you can define a special style tag with an id of <code>surveycompo</code> in the hosting page. This style tag will be applied to the survey component and its children.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n    &lt;style id=\"surveycompo\" media=\"not all\"&gt;\n        :host {\n            font-family: monospace;\n            font-size: 14px;\n        }\n        .sc-checkbox,\n        .sc-checkbox-text {\n            background-color: white;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;survey-compo src=\"./source.json\" style=\"width: 400px; height:100%;\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>In the above example, the <code>:host</code> selector is used to apply styles to the survey component itself. The <code>.sc-checkbox</code> and <code>.sc-checkbox-text</code> selectors are used to apply styles to the Checkbox input and CheckboxText input.</p>"},{"location":"customization/overview/#custom-style-with-the-json-model","title":"Custom Style With The JSON Model","text":"<p>SurveyCompo surveys are designed with portability in mind. A survey can be embedded in different web pages and is expected to look and behave the same way across different hosting environments. Therefore, the JSON model is designed to be the source of truth for the survey's appearance and behavior.</p> <p>You can define custom styles in the JSON model of the survey in two ways: using the <code>theme</code> object and the <code>css</code> key. The <code>theme</code> object allows you to define the survey's appearance using predefined theme properties. The <code>css</code> key allows you to define custom styles for the survey.</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"css\": \".sc-checkbox,.sc-checkbox-text { background-color: white; }\",\n  \"theme\": {\n    \"primaryColor\": \"#000099\"\n  },\n  \"pages\": [\n    /* ... */\n  ]\n}\n</code></pre> <p>Note</p> <p>Don't worry if the examples above do not make much sense to you. We will explain all these options in detail in the following sections.</p>"},{"location":"customization/overview/#style-precedence","title":"Style Precedence","text":"<p>If you have conflicting styles applied to the same survey element, the precedence of the styles is as follows:</p> <ol> <li>The <code>css</code> key in the Survey JSON model takes the highest precedence.</li> <li>The CSS styles defined with the special style tag (with <code>id</code> of <code>surveycompo</code>) take precedence over the styles from a <code>theme</code> in the Survey JSON model.</li> <li>The styles defined with the <code>theme</code> object take precedence over the default styles of SurveyCompo.</li> </ol>"},{"location":"customization/theme/","title":"Theme","text":"<p>SurveyCompo provides a configurable theme model that makes it easy for you to customize the look of your survey. This model includes a variety of color options, radius settings, and font settings that you can apply to your survey.</p> <p>As demonstrated in previous examples, SurveyCompo defaults to a light and minimalist theme. If you wish to alter the theme of your survey, you can do so by using the <code>theme</code> key in the survey's JSON model.</p> <p>The following example creates a 'Dark' theme for the survey with just a few lines:</p> PreviewJSON <p></p> <pre><code>{\n  /* ... */\n  \"theme\": {\n    \"primaryColor\": \"#6875ff\",\n    \"backgroundColor\": \"#1B2025\",\n    \"baseColor\": \"#2b333a\",\n    \"neutralColor\": \"#393939\",\n    \"defaultRadius\": \"0.5em\"\n  }\n}\n</code></pre> <p>The next example creates a theme with customized background:</p> PreviewJSON <p></p> <pre><code>{\n  /* ... */\n  \"theme\": {\n    \"primaryColor\": \"#0b703f\",\n    \"textColor\": \"#213029\",\n    \"backgroundColor\": \"#ead971\",\n    \"baseColor\": \"#efe192\",\n    \"defaultRadius\": \"2em\",\n    \"textareaRadius\": \"1em\"\n  }\n}\n</code></pre>"},{"location":"customization/theme/#the-theme-model","title":"The Theme Model","text":"<p>Here are some common properties you can use to customize the theme:</p> <ul> <li><code>primaryColor</code>: Define the primary color for buttons and inputs.</li> <li><code>backgroundColor</code>: Set the background color of the survey.</li> <li><code>baseColor</code>: Set the background color of some input containers. e.g. Textarea, Checkbox, Radio etc.</li> <li><code>textColor</code>: Adjust the text color throughout the survey.</li> <li><code>neutralColor</code>: Customize the color of borders, boxes, disabled elements, and secondary buttons.</li> <li><code>defaultRadius</code>: Modify the default border radius for inputs and buttons.</li> <li><code>defaultBorderWidth</code>: Change or remove (by setting to 0px) the border widths for inputs and buttons.</li> <li>Lastly, tweak specific settings that override the default ones for certain elements, like <code>textareaRadius</code> for textareas.</li> </ul> <p>All theme model properties are optional. You have the flexibility to customize the theme as you see fit. SurveyCompo will automatically adjust other default values based on the ones you provide. For instance, if you specify a <code>backgroundColor</code> without a <code>textColor</code>, SurveyCompo will automatically adjust the text color to ensure readability. For detailed information on the JSON keys and values used in a theme model, refer to the Themes section in the documentation.</p>"},{"location":"customization/theme/#the-theme-editor","title":"The Theme Editor","text":"<p>SurveyCompo also provides a Theme Editor tool that allows you to visually customize the theme of your survey. This tool provides a user-friendly interface that lets you adjust the colors, radius, and font settings of your survey. Once you've customized the theme to your liking, you can apply it to your survey.</p> <p>To access the Theme Editor, click on the 'Theme Editor' icon button in the top-right corner of the survey JSON Editor or click on the theme icon next to the Survey node in the Visual Editor. The Theme Maker will open in a new window, allowing you to customize the theme of your survey. Once you've made your changes, click the 'Apply' button to apply the theme to your survey.</p> <p></p>"},{"location":"customization/toplevel/","title":"Top Level Style","text":"<p>Let's look at how to customize the top-level SurveyCompo component using CSS rules.</p>"},{"location":"customization/toplevel/#position-and-size","title":"Position and Size","text":"<p>You can set the size and position of the SurveyCompo component using standard CSS rules. The following examples set some top-level styles of the survey component, one using inline CSS rules and the other using a style tag:</p> Inline StyleStyle tag <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;survey-compo src=\"./source.json\" style=\"width: 400px; height:100%; margin: auto; font-size: 14px\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;style&gt;\n        survey-compo {\n            width: 400px;\n            height: 100%;\n            margin: auto;\n            font-size: 14px;\n        }\n    &lt;/style&gt;\n    &lt;survey-compo src=\"./source.json\"  /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note</p> <p>By default, a SurveyCompo survey has both the width and height set to 100%. This means that the survey will take up the full width and height of its parent container. You can adjust the width and height of the survey itself or its container to change the size of the survey.</p>"},{"location":"customization/toplevel/#font-size","title":"Font Size","text":"<p>You can customize the font size of your surveys. It's important to note that <code>font-size</code> does more than just setting the default size of the fonts in the survey.</p> <p>SurveyCompo is designed to be responsive and adapt to various screen sizes. Internally, it uses the CSS <code>em</code> unit for spacing, which is relative to the font size of the root element. This allows the survey to scale proportionally with the font size, ensuring that the survey elements maintain their relative size and spacing. Modifying the font size will change the spacing between elements while maintaining the relative proportions of the survey components.</p> <p>The survey font size is controlled by the <code>fontSize</code> key in the Theme model. By default, this <code>fontSize</code> key has a value of <code>inherit</code>, meaning it will inherit the font size from the container element on the hosting page. This also allows you to apply your preferred font size to the survey using CSS rules or inline styles.</p> <p>The following examples demonstrate how changing the <code>font-size</code> property affects the spacing between elements:</p> font-size: 10pxfont-size: 14px (default)font-size: 16px <p></p> <p></p> <p></p>"},{"location":"customization/toplevel/#font-family","title":"Font Family","text":"<p>By default, SurveyCompo surveys use a cross-browser sans-serif font family. This default works for most use cases and maintains visual consistency regardless of where the survey is embedded.</p> <p>The default font family is set via the <code>fontFamily</code> key of the Theme model. The default value is <code>sans-serif</code>. You can change this value to your preferred font family.</p> <p>Alternatively, you can set the <code>fontFamily</code> key to <code>inherit</code> to allow the survey to use the font family from the hosting page. This is useful when you want the survey to match the font style of the hosting page or if you want to apply your preferred font family to the survey using CSS rules.</p> HTMLSurvey JSON <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;survey-compo src=\"./source.json\"\n                  style=\"font-family: monospace; font-size: 14px\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>{\n    \"name\": \"My Survey\",\n    \"theme\":\n        {\n            \"fontFamily\": \"inherit\"\n        },\n    \"pages\": [\n        /* ... */\n    ]\n}\n</code></pre>"},{"location":"customization/toplevel/#background-styles","title":"Background Styles","text":"<p>SurveyCompo surveys have a transparent background by default. This means you can customize the background color or add a background image for the survey using top-level css style rules. You can apply this style to the survey component itself or its container.</p> HTMLPreview <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n    &lt;style&gt;\n        survey-compo {\n            background-image: url('http://doc.surveycompo.com/images/background.jpg');\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;survey-compo src=\"./source.json\"   /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"data-models/block/","title":"Block","text":"<p>A \u2018Block\u2019 in SurveyCompo is a section of content on a survey page - it\u2019s the building block of your survey. It can serve as a container for a survey question, housing both the question itself and its corresponding input controls for answers, and it offers a high degree of flexibility in how you present information and gather responses. It can also be utilized to provide instructions or explanations, guiding your respondents through the survey.</p>"},{"location":"data-models/block/#block-structure","title":"Block Structure","text":"<p>Blocks can contain the following optional elements:</p> <p></p> <ul> <li>Index: A numerical indicator to help organize and order questions.</li> <li>Title: The primary text of your survey question.</li> <li>Subtitle: Provides hints, instructions, or additional context for the question.</li> <li>Description: Offers further detailed instructions or explanations related to the question.</li> <li>Footnote: Use this to include references, links to legal information, or other relevant details.</li> <li>Inputs: The interactive elements where users provide their responses (e.g., text boxes, dropdowns, checkboxes, and more).</li> </ul>"},{"location":"data-models/block/#inputs-within-block","title":"Inputs within Block","text":"<p>SurveyCompo stands out by allowing you to combine multiple input types within a single block. This gives you significant flexibility in question design.</p> <p>For example, a block titled \"Tell us about yourself\" could include a text input for the user's name, a dropdown for age range, and a checkbox list for areas of interest.</p> <p>When a Block is used to provide instructions or explanations rather than to collect user inputs, it will have an empty list of inputs. This is a common practice in survey design to guide respondents through the survey flow. For example, a block titled \"Instructions\" may contain only a description and footnote, with no input controls. This is a powerful feature that allows you to create dynamic and engaging surveys tailored to your specific needs. SurveyCompo gives you the flexibility to design your survey in a way that best suits your goals and audience.</p>"},{"location":"data-models/block/#advanced-customization-with-html","title":"Advanced Customization with HTML","text":"<p>All text elements within a block (title, subtitle, description, footnote) support custom HTML, enabling a wide range of customization:</p> <ul> <li>Rich Formatting: Control fonts, colors, text size, emphasis (bold, italics), and more.</li> <li>Embed Media: Integrate images, videos, or audio clips to enhance your questions.</li> <li>Interactive Elements: Add buttons, links, or other interactive components directly within a block.</li> </ul> <p>Refer to the Custom HTML documentation for more information.</p> <p>Warning</p> <p>Use valid HTML syntax and prioritize security. Avoid incorporating code from unknown sources or user input, as it could introduce vulnerabilities.</p>"},{"location":"data-models/block/#branchingskipping-logic","title":"Branching/Skipping Logic","text":"<p>The <code>visibleIf</code> setting lets you control a block's display based on specific survey responses. This is essential for creating dynamic surveys with branching paths that adapt to user input. For detailed information on conditional logic, refer to the Conditional Logic documentation.</p>"},{"location":"data-models/block/#question-randomization","title":"Question Randomization","text":"<p>Prevent response bias by shuffling the order in which blocks appear on a page. SurveyCompo allows you to randomize all blocks or select specific ones for randomization. For detailed information on randomization, refer to the Randomization documentation.</p>"},{"location":"data-models/block/#responsive-grid-layout","title":"Responsive Grid Layout","text":"<p>Blocks feature a powerful grid layout engine to arrange input elements:</p> <ul> <li>Column Layout: Organize inputs into multiple columns for efficient use of space.</li> <li>Input Direction: Control whether inputs are stacked vertically or displayed side-by-side.</li> </ul> <p>For detailed information on layout options, refer to the Layout documentation.</p>"},{"location":"data-models/block/#block-json-example","title":"Block JSON Example","text":"<p>The following code example demonstrates how blocks integrate into the survey JSON data model.  view source</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      /* ... */\n      \"blocks\": [\n        {\n          \"title\": \"Gender\",\n          \"layoutColumnCount\": 2,\n          \"layoutColumnWidth\": \"50%\",\n          \"inputs\": [\n            /* ... */\n          ]\n        },\n        {\n          \"title\": \"Age\",\n          \"inputs\": [\n            /* ... */\n          ]\n        }\n      ]\n    }\n    /* ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre>"},{"location":"data-models/block/#block-data-keys","title":"Block Data Keys","text":"Method Type Default Description <code>name</code> string null The name of the block. <code>customRef</code> string null A custom reference to the block. <code>templateName</code> string null The block template name. If set, the current block inherits keys from the matched template. <code>title</code> string null The title of the block. <code>htmlTitle</code> string null The block's title in HTML format. <code>subtitle</code> string null The subtitle of the block. <code>htmlSubtitle</code> string null The block's subtitle in HTML format. <code>description</code> string null A text description for the block. <code>htmlDescription</code> string null The block's description in HTML format. <code>footnote</code> string null A footnote to the block. <code>htmlFootnote</code> string null The block's footnote in HTML format. <code>inputs</code> Input[] [] An array of inputs within the block. <code>showIndexNumber</code> boolean true If true, index numbers for inputs in the block are displayed. <code>validations</code> Validation[] [] An array of validation rules for the block. <code>visibleIf</code> Condition Expression null The condition for block visibility. The block is displayed only if the condition is met. <code>requiresVisibleInputs</code> boolean false If true, the block is displayed only if there are visible inputs in the block. <code>randomWithinGroup</code> string null If set, the display order of blocks with the same group name is randomized. <code>layoutColumnCount</code> number 1 The column count of the block layout. <code>layoutColumnWidth</code> string '100%' The column width of the block layout. Accepts CSS width values (e.g., 200px, 50%). <code>layoutColumnAutoFit</code> boolean true When set to true, the block layout will adjust the columns to occupy the full width of the available space.. <code>layoutColumnGap</code> string '0' The column gap of the block layout. Accepts CSS width values (e.g., 5px, 1em). <code>layoutRowGap</code> string '1em' The row gap of the block layout. Accepts CSS width values (e.g., 5px, 1em). <code>layoutFlow</code> 'COLUMN', 'ROW' 'ROW' Determines the direction in which the survey elements are arranged. This could be either vertically (top to bottom) or horizontally (left to right). <code>layoutCenterAligned</code> boolean false If true, the block layout is centered. <code>layoutLikertMatrixWidth</code> string '100%' The width of the Likert Matrix table. Only applicable to Likert input types. <code>layoutLikertMatrixLabelWidth</code> string '25%' The width of the label column in a Likert Matrix. Only applicable to Likert input types. <code>layoutLikertMatrixMode</code> 'AUTO', 'LIKERT', 'MATRIX' 'AUTO' Manages the visibility of the Likert Matrix Table on smaller screens"},{"location":"data-models/input/","title":"Input","text":"<p>Inputs are the heart of data collection within your SurveyCompo surveys. They provide the interactive elements where users submit their answers, opinions, and feedback. SurveyCompo offers a wide range of input types to accommodate diverse survey needs.</p>"},{"location":"data-models/input/#key-concepts","title":"Key Concepts","text":"<ul> <li> <p>Inputs within Blocks: Blocks act as containers for one or more input controls. SurveyCompo gives you the flexibility to combine different input types within a single Block.</p> </li> <li> <p>Labels and Hints: Most inputs can have an optional label (the question or instruction) and a hint (additional guidance for the user). Both support HTML for customization.</p> </li> <li> <p>Input Ids: Each input can be assigned an identifier (<code>id</code>). This is useful for implementing piping, validation, and conditional logic. To gather responses, it's crucial to assign an <code>id</code> to inputs. This is because when responses are collected, they are associated with their respective <code>id</code>.</p> </li> <li> <p>Input Values: Each input type collects data differently. Some have boolean values (true/false), others text values, numerical values, or selections from a list.</p> </li> <li> <p>Input Randomization: You can randomize the order in which inputs appear within a block to prevent response bias.</p> </li> <li> <p>Conditional Logic: Use the <code>visibleIf</code> key for inputs to show or hide them based on specific survey responses or variables. Conditional logic creates dynamic surveys that adapt to user input.</p> </li> <li> <p>Input Validation: Define validation rules to ensure users provide data in the expected format (e.g., valid email addresses, numeric values within a range). Validation improves data quality and the user experience.</p> </li> </ul>"},{"location":"data-models/input/#input-ids","title":"Input IDs","text":"<p>In SurveyCompo, survey response data is collected as key-value pairs. The key is the <code>id</code> assigned to each input, and the value is the user's response to that input. Therefore, it is essential to assign an <code>id</code> to each input that is intended to capture user responses.</p> <p>Here's an example:</p> <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"title\": \"What is your current employment status?\",\n          \"inputs\": [\n            {\n              \"type\": \"RADIO\",\n              \"id\": \"employment:employed\",\n              \"label\": \"Employed\"\n            },\n            {\n              \"type\": \"RADIO\",\n              \"id\": \"employment:retired\",\n              \"label\": \"Retired\"\n            },\n            {\n              \"type\": \"RADIO\",\n              \"id\": \"employment:other\",\n              \"label\": \"Other\"\n            }\n          ]\n        }\n        /* ... other blocks ... */\n      ]\n    }\n    /* ... other pages ... */\n  ]\n}\n</code></pre> <p>In the example above, each radio input has a unique <code>id</code> that includes a prefix (<code>employment:</code>) followed by a specific identifier (<code>employed</code>, <code>retired</code>, <code>other</code>). This naming convention groups related inputs and differentiates them when collecting responses. However, you can use any naming convention that suits your needs.</p> <p>Since the inputs are radio buttons, the values collected will be boolean (<code>true</code>/<code>false</code>). For example, if the respondent selects the \"Employed\" option, the value collected will be <code>true</code> for the input id <code>employment:employed</code>. You can then use this value in conditional logic or piping. For instance, to ask a question only applicable to employed respondents, you can use the following condition:</p> <pre><code>{\n  /* ... */\n  \"visibleIf\": \"#employment:employed\"\n}\n</code></pre> <p>What if you want to group several inputs together but only need a single value from one of them? In this case, you can assign the same <code>id</code> to multiple inputs. Here's an example:</p> <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"title\": \"What is your current employment status?\",\n          \"inputs\": [\n            {\n              \"type\": \"RADIO\",\n              \"id\": \"employment\",\n              \"label\": \"Employed\",\n              \"checkedValue\": \"employed\"\n            },\n            {\n              \"type\": \"RADIO\",\n              \"id\": \"employment\",\n              \"label\": \"Retired\",\n              \"checkedValue\": \"retired\"\n            },\n            {\n              \"type\": \"RADIO\",\n              \"id\": \"employment\",\n              \"label\": \"Other\",\n              \"checkedValue\": \"other\"\n            }\n          ]\n        }\n        /* ... other blocks ... */\n      ]\n    }\n    /* ... other pages ... */\n  ]\n}\n</code></pre> <p>In this example, the identifier <code>employment</code> is assigned to three radio inputs. However, only the value from the radio button that the respondent last interacted with (i.e., the selected option) will be recorded. The <code>checkedValue</code> key is used to define the value that will be recorded when an input is selected. Without this, the input's recorded value would simply be a boolean (<code>true</code>/<code>false</code>), which may not be meaningful in this context.</p> <p>If the 'Employ' radio button is selected, the value recorded will be <code>employed</code>. You can also use this value in conditional logic or piping. For example, to ask a question only applicable to employed respondents, you can use the following condition:</p> <pre><code>{\n  \"visibleIf\": \"#employment == employed\"\n}\n</code></pre> <p>Based on your data reporting requirements and survey structure, you can choose the approach that best suits your needs. Grouping related inputs under a common <code>id</code> can be useful when you need to capture a single value from multiple inputs. This works well for most single choice questions and can simplify data analysis. However, allowing each input to have a unique <code>id</code> can provide more granular data and flexibility in data analysis.</p>"},{"location":"data-models/input/#input-id-best-practices","title":"Input ID Best Practices","text":"<p>Here are some best practices to consider when assigning IDs to inputs:</p> <ul> <li> <p>Use Descriptive IDs: Assign IDs that are descriptive and easy to understand. This makes it easier to identify inputs when analyzing survey data.</p> </li> <li> <p>Use Prefixes: Use prefixes to group related inputs. This helps organize inputs and differentiate them when collecting responses.</p> </li> <li> <p>Avoid Special Characters: Avoid using special characters in IDs. Stick to alphanumeric characters, underscores and colon (:).</p> </li> <li> <p>Use CamelCase: If you prefer to use multiple words in an ID, consider using camelCase or underscores to separate words.</p> </li> <li> <p>Be Consistent: Maintain a consistent naming convention across your survey to ensure clarity and consistency in your data collection.</p> </li> <li> <p>Avoid Spaces: IDs cannot contain spaces. If you need to separate words, use camelCase or underscores.</p> </li> <li> <p>Use Meaningful Names: Choose IDs that reflect the purpose of the input. This makes it easier to interpret survey data and perform analysis.</p> </li> </ul> <p>Tip</p> <p>If you want to use input IDs in piping expressions, ensure that the IDs contain only alphanumeric characters, underscores, and colons. Avoid using spaces or special characters in IDs to prevent errors in piping expressions.</p>"},{"location":"data-models/input/#input-types","title":"Input Types","text":"<p>Here's a quick overview of the input types currently supported. For more information on each input type, including examples and use cases, refer to the Input Types documentation.</p> <p>Checkboxes and Radios</p> <ul> <li>CHECKBOX: Multiple selections from a list (boolean values).</li> <li>CHECKBOX_TEXT: A \"checkbox + text\" combination to capture an 'Other' option.</li> <li>RADIO: Single selection from a list (boolean value).</li> <li>RADIO_TEXT: A \"radio + text\" combination for an 'Other' option.</li> </ul> <p>Rating Scales</p> <ul> <li>STAR_SCALE: Familiar star-based rating (integer value)</li> <li>NUMBER_SCALE: Numeric scale rating (integer value)</li> </ul> <p>Text-Based Inputs</p> <ul> <li>TEXT: Single-line text input (text value).</li> <li>TEXTAREA: Multi-line text input (text value).</li> </ul> <p>Specialized Inputs</p> <ul> <li>LIKERT_SCALE: Opinion scale presented in a visually appealing format (text value of the chosen option).</li> <li>TOGGLE: On/off switch (boolean value).</li> <li>DROPDOWN: A dropdown list for selecting one option (text value).</li> <li>IMAGE: Images as selectable options (text values of selected images).</li> <li>MATRIX: A grid-based question format for collecting responses to multiple related questions using a consistent scale.</li> </ul>"},{"location":"data-models/input/#input-json-example","title":"Input JSON Example","text":"<p>The following code example demonstrates how inputs integrate into the survey JSON data model.  view source</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      /* ... */\n      \"blocks\": [\n        {\n          \"title\": \"Gender\",\n          \"layoutColumnCount\": 2,\n          \"layoutColumnWidth\": \"50%\",\n          \"inputs\": [\n            {\n              \"type\": \"RADIO\",\n              \"label\": \"Male\"\n            },\n            {\n              \"type\": \"RADIO\",\n              \"label\": \"Female\"\n            },\n            {\n              \"type\": \"RADIO\",\n              \"label\": \"Non-binary\"\n            },\n            {\n              \"type\": \"RADIO\",\n              \"label\": \"Prefer not to say\"\n            }\n          ]\n        },\n        {\n          \"title\": \"Age\",\n          \"inputs\": [\n            {\n              \"type\": \"DROPDOWN\",\n              \"hint\": \"Please select ...\",\n              \"dropdownInputOptions\": [\n                \"Under 18\",\n                \"18-24\",\n                \"25-34\",\n                \"35-44\",\n                \"45-54\",\n                \"55-64\",\n                \"65 or over\"\n              ]\n            }\n          ]\n        }\n      ]\n    }\n    /* ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre>"},{"location":"data-models/input/#input-data-keys","title":"Input Data Keys","text":"Method Type Default Description <code>id</code> string null ID of this input. IDs are used to identify inputs within a survey and are used to support features such as piping and conditional logic. Ids can not contain spaces. <code>name</code> string null Name of the input. <code>group</code> string null The group name for the input. Inputs with the same group name are treated as a single selection group. Applicable to RADIO, RADIO_TEXT AND IMAGE (with <code>imageInputAllowMultiple</code> = false ) input type. <code>customRef</code> string null Custom reference associated with the input. <code>type</code> InputTypeEnum null The type of the input, such as 'CHECKBOX' or 'RADIO'. <code>label</code> string null The text label for the input field. <code>htmlLabel</code> string null The HTML formatted label for the input field. <code>hint</code> string null A hint or guidance for the input field. <code>htmlHint</code> string null The HTML formatted hint for the input field. <code>defaultValue</code> number, string, boolean null The default value for the input field. <code>checkedValue</code> number, string, boolean null This value is used when the input is selected or checked. The default value is <code>true</code>. This key is ONLY applicable to the input types RADIO, RADIO_TEXT, TOGGLE, and IMAGE. field. <code>visibleIf</code> Condition Expression null The condition for input visibility. The input field is displayed only if this condition is satisfied. <code>labelPosition</code> LabelPositionEnum Depends on input type The position of the input labels. <code>labelWidth</code> string '100%' The width of the input label column. Accepts CSS width values (e.g., 200px, 50%). <code>validations</code> Validation[] [] An array of validation rules applicable for the input field. <code>randomWithinGroup</code> string null If set, the display order of inputs within the same group is randomized in the parent block. <code>imageInputSrc</code> string null The source URL for the image, applicable only for IMAGE type inputs. <code>imageInputAllowMultiple</code> boolean false Determines whether multiple images can be selected. Applicable only for IMAGE type inputs. <code>imageInputPadding</code> string '0px' The padding around the image. Applicable only for IMAGE type inputs. Accepts CSS width values (e.g., 200px, 50%). <code>imageInputNoBorder</code> boolean false Specifies if the image should be displayed with a box border. This is only applicable for inputs of the IMAGE type. <code>imageInputCheckMarkPosition</code> 'TOP', 'BOTTOM' 'TOP' Determines the location of the check mark when an image is selected. This setting is only relevant for inputs of the IMAGE type. <code>likertInputPreset</code> LikertPresetEnum null The name of a predefined set of likert options. Applicable only for LIKERT type inputs. <code>likertInputPresetReverse</code> boolean false Reverse the display order of likert preset.inputs. <code>likertInputOptions</code> string[] or Object [] A list of labels, or a map of value-label pairs as likert options. <code>numberScaleInputMin</code> number 1 The minimum value of selectable numbers. Applicable only for NUMBER_SCALE type inputs. <code>numberScaleInputMax</code> number 10 The maximum value of selectable numbers. Applicable only for NUMBER_SCALE type inputs. <code>numberScaleInputLabels</code> string[] [] A list of labels for selectable numbers. Applicable only for NUMBER_SCALE type inputs. <code>numberScaleInputLabelPosition</code> 'TOP', 'BOTTOM' 'BOTTOM' The position of labels. Applicable only for NUMBER_SCALE type inputs. <code>dropdownInputPreset</code> DropdownPresetEnum null The name of a predefined set of dropdown options. Applicable only for DROPDOWN type inputs. <code>dropdownInputPresetReverse</code> boolean false Reverse the display order of dropdown preset. inputs. <code>dropdownInputOptions</code> string[] or Object [] A list of labels, or a map of value-label pairs as dropdown options. Applicable only for DROPDOWN type inputs. <code>starInputCount</code> number 5 The number of stars. Allows values from 2 to 11. Applicable only for STAR_SCALE type inputs. <code>starInputColor</code> string '#f1c40f' The color of stars in hex string format. Applicable only for STAR_SCALE type inputs. <code>textInputType</code> TextInputTypeEnum TEXT The type of the text input. Applicable only for Text input. <code>textInputMin</code> string, number null The minimum value allowed. Applicable only for Text Input Type of Date, DateTime and Number. <code>textInputMax</code> string, number null The maximum value allowed. Applicable only for Text Input Type of Date, DateTime and Number. <code>textareaInputRows</code> number 5 The height of the textarea input in terms of number of rows. Applicable only for TEXTAREA inputs."},{"location":"data-models/other-models/","title":"Other models","text":""},{"location":"data-models/other-models/#theme","title":"Theme","text":"<p>The <code>Theme</code> model allows you to customize the appearance of your survey. You can define colors, fonts, and other visual elements to match your brand or create a specific look and feel for your survey.</p> Method Type Default Description <code>fontFamily</code> string \"sans-serif\" The text font family. Accepts CSS font-family values. <code>fontSize</code> string 'inherit' The font size. Accepts CSS font size values. <code>primaryColor</code> string '#0f172a' The primary base color using a hexadecimal code. <code>backgroundColor</code> string '#ffffff' The background color of the survey using a hexadecimal code. <code>baseColor</code> string '#ffffff' The base color for input containers, e.g. textarea background, checkbox container background color. <code>textColor</code> string null The text color using a hexadecimal code. <code>errorColor</code> string '#dc2626' The error color using a hexadecimal code. <code>neutralColor</code> string '#d4d4d8' The color of neutral elements using a hexadecimal code. <code>warningColor</code> string '#ea580c' The color for warning messages using a hexadecimal code. <code>buttonColor</code> string null The color for buttons using a hexadecimal code. <code>borderColor</code> string null The color for borders using a hexadecimal code. <code>defaultRadius</code> string '0' The default radius for buttons, boxes, and inputs. Accepts CSS radius values (e.g., '0.5em'). <code>buttonRadius</code> string null The radius for buttons. If set, it overrides the default radius. Accepts CSS radius values. <code>boxRadius</code> string null The radius for box containers. If set, it overrides the default radius. Accepts CSS radius values. <code>inputRadius</code> string null The radius for input elements. If set, it overrides the default radius. Accepts CSS radius values. <code>textareaRadius</code> string null The radius for textareas. If set, it overrides the default radius. Accepts CSS radius values. <code>defaultBorderWidth</code> string '1px' The default border width for buttons, boxes, and inputs. Accepts CSS width values (e.g., '1px'). <code>buttonBorderWidth</code> string null The border width for buttons. If set, it overrides the default border width. Accepts CSS width values. <code>boxBorderWidth</code> string null The border width for boxes. If set, it overrides the default border width. Accepts CSS width values. <code>inputBorderWidth</code> string null The border width for input elements. If set, it overrides the default border width. Accepts CSS width values."},{"location":"data-models/other-models/#validation","title":"Validation","text":"<p>The <code>Validation</code> model defines rules to ensure that user input meets specific criteria. You can set requirements for input fields, such as minimum and maximum values, selection limits, and valid formats (e.g., email addresses).</p> Method Type Default Description <code>type</code> ValidationTypeEnum n/a (Required) Specifies the type of the validation rule. e.g. EMAIL <code>value</code> string, number, boolean null Represents the value that is relevant to the selected validation rule. For example, for a \"MIN_LENGTH\" rule, this would be the minimum length required. <code>message</code> string (Default message based on validation type) Defines the message that will be displayed when the validation rule is not met. <code>applicableIf</code> Condition Expression null Specifies a condition for the validation rule. If set, the rule will only be applied if the condition is met."},{"location":"data-models/other-models/#condition","title":"Condition","text":"<p>The <code>Condition</code> model is used to define conditional logic within your survey. Conditions determine when specific survey elements (e.g., screens, pages, blocks, inputs) are displayed based on user responses or external variables.</p> <p>Condition expression can be a <code>string</code> or an <code>object</code> with the following properties:</p> Method Type Default Description <code>$and</code> Condition[] n/a Logical <code>AND</code> operator for one or more condition rules. <code>$or</code> Condition[] n/a Logical <code>OR</code> operator for one or more condition rules. <code>$not</code> Condition[] n/a Logical <code>NOT</code> operator for one or more condition rules. <p>Conditional logic is a powerful tool for creating dynamic surveys that adapt to user input and external variables. For an in-depth understanding, kindly consult the 'Conditional Logic' section in our documentation.</p>"},{"location":"data-models/other-models/#enum-data-types","title":"Enum Data Types","text":"Enum Name Description Values <code>InputTypeEnum</code> Input Types CHECKBOX, CHECKBOX_TEXT, RADIO, RADIO_TEXT, STAR_SCALE, NUMBER_SCALE, LIKERT_SCALE, TEXT, TEXTAREA, TOGGLE, DROPDOWN, IMAGE <code>LabelPositionEnum</code> Label Positions TOP, BOTTOM, LEFT, RIGHT, NONE <code>LikertPresetEnum</code> Likert Option Presets AGREEMENT, FREQUENCY, SATISFACTION, QUALITY, IMPORTANCE, FAMILIARITY, AWARENESS, LIKELIHOOD, CONCERN <code>DropdownPresetEnum</code> Dropdown Option Presets YEARS, MONTHS, MONTHS_SHORT, WEEK_DAYS, WEEK_DAYS_SHORT, MONTH_DAYS, COUNTRIES <code>TextInputTypeEnum</code> Text Input Value EMAIL, NUMBER, DATE, DATETIME, TIME, TEXT <code>ValidationTypeEnum</code> Types of Validation Rules REQUIRED, NUMERIC, INTEGER, MIN_LENGTH, MAX_LENGTH, MIN_VALUE, MAX_VALUE, MIN_SELECTION, MAX_SELECTION, EMAIL, URL, DOMAIN, EQUALS, REGEX. <p>Tip</p> <p>As you can see, most of the enum values are in uppercase. Actually these values are case-insensitive in general. However, it is recommended to use them in uppercase for consistency.</p>"},{"location":"data-models/page/","title":"Page","text":"<p>Pages are the backbone of your SurveyCompo surveys. They contain your survey questions, guide user progress, and offer versatile customization options. Let's explore their structure and features.</p>"},{"location":"data-models/page/#page-structure","title":"Page Structure","text":"<p>A page can include the following optional elements:</p> <p></p> <ul> <li> <p>Header: A dedicated area at the top for titles or instructions.</p> </li> <li> <p>Description: Provides more context about the page's purpose or offers additional instructions for the user.</p> </li> <li> <p>Blocks: The fundamental building blocks of your survey questions. A page can contain multiple blocks, each typically representing one question. (See the 'Blocks' section for a detailed breakdown.)</p> </li> <li> <p>Footer: Use this for additional information, navigation, or legal statements.</p> </li> <li> <p>Next Button: Allows users to progress to the following page. Clicking \"Next\" also triggers validation of the inputs on the current page.</p> </li> </ul>"},{"location":"data-models/page/#page-layout","title":"Page Layout","text":"<p>To customize the arrangement of your page elements, SurveyCompo offers the following settings:</p> <ul> <li><code>vCentered</code>: Vertically center elements. The default is <code>true</code>.</li> <li><code>hCentered</code>: Horizontally center elements. The default is <code>false</code>.</li> </ul>"},{"location":"data-models/page/#customization-with-html","title":"Customization with HTML","text":"<p>Enhance headers, descriptions, and footers with custom HTML syntax for:</p> <ul> <li>Rich Formatting: Control fonts, colors, text size, emphasis (bold, italics), and more.</li> <li>Embed Media: Integrate images, videos, or audio clips to enhance your questions.</li> <li>Interactive Elements: Add buttons, links, or other interactive components directly within a page.</li> </ul> <p>SurveyCompo uses specific 'html' keys for custom content:</p> <ul> <li><code>htmlHeader</code></li> <li><code>htmlDescription</code></li> <li><code>htmlFooter</code></li> </ul> <p>Refer to the Custom HTML documentation for more information.</p> <p>Warning</p> <p>Use valid HTML syntax and prioritize security. Avoid incorporating code from unknown sources or user input, as it could introduce vulnerabilities.</p>"},{"location":"data-models/page/#branchingskipping-logic","title":"Branching/Skipping Logic","text":"<p>Use the <code>visibleIf</code> setting to conditionally show or hide pages based on survey responses. This is key for creating adaptive surveys that tailor the experience to the user's input. For detailed information on conditional logic, refer to the Conditional Logic documentation.</p>"},{"location":"data-models/page/#page-randomization","title":"Page Randomization","text":"<p>Prevent response bias by shuffling the order of pages. SurveyCompo's <code>randomizedWithinGroup</code> setting allows for randomization of all or selected pages. When multiple pages share the same group name, they are randomized together. For detailed information on randomization, refer to the Randomization documentation.</p>"},{"location":"data-models/page/#page-json-example","title":"Page JSON Example","text":"<p>The following code example demonstrates how a page integrates into the survey JSON data model.  view source</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"Basic Information\",\n      \"htmlDescription\": \"&lt;p&gt;Let\u2019s begin by gathering some essential details. &lt;br /&gt;We assure you that we will not share personal information.&lt;/p&gt;\",\n      \"htmlFooter\": \"&lt;p class='footnote'&gt;&lt;a href=''&gt;privacy&lt;/a&gt; &amp; &lt;a href=''&gt;cookie policy&lt;a&gt;&lt;/p&gt;\",\n      \"blocks\": [\n        /* ... */\n      ],\n      \"nextButtonLabel\": \"Next\"\n    }\n    /* ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre>"},{"location":"data-models/page/#page-data-keys","title":"Page Data Keys","text":"Method Type Default Description <code>name</code> string null The name of the page. <code>customRef</code> string null A custom reference ID for the page. <code>templateName</code> string null The page template name. The current page inherits keys from the matched template. <code>header</code> string null The page header text. <code>htmlHeader</code> string null The page header in HTML format. <code>description</code> string null A text description for the page. <code>htmlDescription</code> string null The page description in HTML format. <code>footer</code> string null The page footer text. <code>htmlFooter</code> string null The page footer in HTML format. <code>blocks</code> Block[] [] An array of blocks on the page. <code>nextButtonLabel</code> string 'OK' The label on the page's next button. <code>nextButtonURL</code> string null The URL to redirect to when the next button is clicked. <code>nextButtonHidden</code> boolean false If true, the next button is hidden. <code>autoAdvancePage</code> boolean false If true, the page automatically advances to the next when applicable. <code>hCentered</code> boolean false If true, the page content is centered horizontally. <code>vCentered</code> boolean true If true, the page content is centered vertically. <code>visibleIf</code> Condition Expression false The condition for page visibility. The page is displayed only if the condition is met. <code>requiresVisibleBlocks</code> boolean false If true, the page is displayed only if there are visible blocks on the page. <code>randomWithinGroup</code> string false If set, the display order of pages with the same group name is randomized."},{"location":"data-models/screen/","title":"Screen","text":"<p>Screens are the visual gateways of your SurveyCompo surveys. They introduce respondents to the survey, provide closure upon completion, and inform users of eligibility or termination. Let's explore their key functions:</p> <ul> <li>Start Screens: These screens welcome users, present essential information, and invite them to participate in your survey.</li> <li>Complete Screens: These screens thank respondents for their time, signaling that the survey has been successfully completed.</li> <li>Abort Screens: These screens inform users that they are ineligible or the survey has been terminated, providing clear reasons as needed.</li> </ul>"},{"location":"data-models/screen/#screen-composition","title":"Screen Composition","text":"<p>A screen can include the following optional elements:</p> <p></p> <ul> <li> <p>Header: A prominent area for the survey title, section headings, or instructions.</p> </li> <li> <p>Description: Provides context, additional details, or instructions for the user.</p> </li> <li> <p>Footer: Use this for additional information, or legal disclaimers.</p> </li> <li> <p>Action Buttons: Each screen can include up to two customizable action buttons. These buttons determine how users navigate through your survey, allowing them to either proceed or exit the current screen.</p> </li> </ul>"},{"location":"data-models/screen/#customizing-screens-with-html","title":"Customizing Screens with HTML","text":"<p>Enhance your screens with the power of HTML:</p> <ul> <li>Enhanced Formatting: Change font size, color, or add emphasis using HTML tags.</li> <li>Embedding Media: Include images, videos, or audio files to enhance the user experience.</li> <li>Interactive Elements: Include links to privacy statements or cookie policies.</li> </ul> <p>SurveyCompo uses specific 'html' keys for custom content:</p> <ul> <li><code>htmlHeader</code></li> <li><code>htmlDescription</code></li> <li><code>htmlFooter</code></li> </ul> <p>Refer to the Custom HTML documentation for more information.</p> <p>Warning</p> <p>Use valid HTML syntax and prioritize security. Avoid incorporating code from unknown sources or user input, as it could introduce vulnerabilities.</p>"},{"location":"data-models/screen/#multiple-screens-and-visibility-conditional-logic","title":"Multiple Screens and Visibility Conditional Logic","text":"<p>SurveyCompo supports multiple start and end screens for flexible survey design. Use the <code>visibleIf</code> setting to conditionally show screens based on survey responses or variables. Refer to the Conditional Logic documentation for more details.</p>"},{"location":"data-models/screen/#screen-json-example","title":"Screen JSON Example","text":"<p>Start, completion, and abort screens share a common data structure within your survey's JSON format.</p> <p>The following code example demonstrates how a screen integrates into the survey JSON data model.  view source</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"startScreens\": [\n    {\n      \"header\": \"We value your opinion!\",\n      \"description\": \"Please take a moment to participate in our brief survey.\",\n      \"htmlFooter\": \"&lt;p class='footnote'&gt;&lt;a href=''&gt;privacy&lt;/a&gt; &amp; &lt;a href=''&gt;cookie policy&lt;a&gt;&lt;/p&gt;\",\n      \"okButtonLabel\": \"Start Survey\",\n      \"cancelButtonLabel\": \"Skip\"\n    }\n  ],\n  \"pages\": [\n    /* ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre>"},{"location":"data-models/screen/#screen-data-keys","title":"Screen Data Keys","text":"Method Type Default Description <code>name</code> string null The name of the screen. <code>customRef</code> string null A custom reference ID for the screen. <code>header</code> string null The text for the screen's header. <code>htmlHeader</code> string null The screen's header in HTML format. <code>description</code> string null The text for the screen's description. <code>htmlDescription</code> string null The screen's description in HTML format. <code>footer</code> string null The text for the screen's footer. <code>htmlFooter</code> string null The screen's footer in HTML format. <code>okButtonLabel</code> string null The label for the screen's OK button. If not set, the OK button will not be displayed. <code>okButtonURL</code> string null The URL to redirect to when the OK button is clicked. <code>cancelButtonLabel</code> string null The label for the screen's Cancel button. If not set, the Cancel button will not be displayed. <code>cancelButtonURL</code> string null The URL to redirect to when the Cancel button is clicked. <code>hCentered</code> boolean true If true, the screen content is centered horizontally. <code>vCentered</code> boolean true If true, the screen content is centered vertically. <code>visibleIf</code> Condition Expression true The condition for screen visibility. The screen is visible only if the condition is met."},{"location":"data-models/survey/","title":"Survey","text":"<p>SurveyCompo offers a powerful and versatile way to design surveys using a flexible data model written in JSON. This section introduces you to the key building blocks of a SurveyCompo survey.</p>"},{"location":"data-models/survey/#survey-structure","title":"Survey Structure","text":"<p>Imagine your SurveyCompo survey as a journey. Here's a visual breakdown of the key elements:</p> Start Screen (Optional) <p>Welcomes users, sets the stage, and provides initial instructions.</p> Survey Pages <p>The heart of your survey, where questions are asked and data is collected. Each page is made up of one or more \"Blocks\". SurveyCompo gives you the freedom to design your surveys in either of these styles:</p> <ul> <li>Single Page: All questions are displayed on one page.</li> <li>Multi-Page: Questions are divided into multiple pages, guiding users through the survey.</li> </ul> Blocks <p>The fundamental units that hold your questions. They contain input controls where users provide their responses. SurveyCompo offers a variety of input controls, from text boxes to specialized elements like Likert scales.</p> End Screen (Optional) <p>Signal the end of the survey.</p> <p>SurveyCompo offers two customizable end screens to manage your survey flow.</p> <ul> <li>Completion Screen: Thanks respondents and may provide further instructions.</li> <li>Abort Screen: Informs users if they don't meet survey criteria.</li> </ul>"},{"location":"data-models/survey/#the-user-flow","title":"The User Flow","text":"<p>Imagine a user journey through the survey:</p> <ol> <li>Invitation: The optional Start Screen introduces the survey.</li> <li>Questions and Answers: Users navigate through Survey Pages, providing responses in Blocks.</li> <li> <p>Outcome:</p> </li> <li> <p>Success: Upon completion, they see the Completion Screen.</p> </li> <li>Disqualification: If ineligible, they are directed to the Abort Screen.</li> </ol>"},{"location":"data-models/survey/#survey-json-example","title":"Survey JSON Example","text":"<p>SurveyCompo uses JSON (JavaScript Object Notation) to define your survey's structure. Think of JSON as a blueprint, using key-value pairs to describe each survey element and its properties. Here's a simplified example:</p> <pre><code>{\n  \"name\": \"My Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"blocks\": [\n        {\n          \"inputs\": [\n            /* ... */\n          ]\n        }\n      ]\n      /* ... */\n    }\n    /* ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre>"},{"location":"data-models/survey/#survey-data-keys","title":"Survey Data Keys","text":"Method Type Default Description <code>name</code> string n/a (Required) The name of the survey. <code>description</code> string null Option description of the survey. <code>customRef</code> string null A custom reference ID for the survey. <code>variables</code> object {} A map of external key-value pairs, such as user name, product name, etc. Variables can be used with piping and conditional logic <code>inputValues</code> object {} A map of key-value pairs to pre-fill input fields. The key is the input ID (optionally prefixed with '#') and the value is the pre-filled value. <code>pageTemplates</code> Page[] [] An array of Page templates, used to share common key values across multiple pages. <code>blockTemplates</code> Block[] [] An array of Block templates, used to share common key values across multiple blocks. <code>pages</code> Page[] [] Array of survey pages. <code>startScreens</code> Screen[] [] An array of Screen models, one of which will be displayed at the start of the survey. <code>abortScreens</code> Screen[] [] An array of Screen models, one of which will be displayed when the participant is disqualified from the survey. <code>completeScreens</code> Screen[] [] An array of Screen models, one of which will be displayed upon the survey's completion. <code>theme</code> Theme null The Theme model for customizing the survey's appearance. <code>css</code> string null Global custom CSS applicable to custom HTML elements. <code>uiShowNavigation</code> boolean true Determines if the navigation buttons should be displayed. <code>uiShowProgress</code> boolean true Determines if the page progress indicator should be displayed. <code>uiShowCloseButton</code> boolean false Determines if a close button should be displayed at the top-right corner. <code>uiUseAnimation</code> boolean true Determines if a sliding animation should be used for page navigation. <code>uiUseFullWidthButtons</code> boolean undefined Determines if the page and screen display buttons that span the full width. By default, buttons are set to occupy the full width only on smaller screens. <code>timeoutSeconds</code> number 1800 The duration of inactivity, in seconds, before the survey session times out and resets. <code>dataEndpoint</code> string undefined URL of the data endpoint for survey event data. If undefined, events are sent to SurveyCompo. You can specify your own data endpoint for data collection. (Available to Premium Plan only) <p>Info</p> <p>Why Arrays for Screens? SurveyCompo supports multiple start, completion, and abort screens. By using conditional logic, these multiple screens enable you to customize the survey experience based on user responses and/or external variables.</p>"},{"location":"input-types/checkbox-text/","title":"Checkbox text","text":"<p>The <code>CHECKBOX_TEXT</code> input type is designed to capture text values. It is represented as a checkbox that users can select or deselect, accompanied by a text input field for capturing textual data. The <code>CHECKBOX_TEXT</code> input type is often used in conjunction with other <code>CHECKBOX</code> inputs, typically serving as an 'Other' option that allows users to provide open-ended responses.</p> <p>Info</p> <p>An input of type <code>CHECKBOX_TEXT</code> captures the text value from the text input field. If the checkbox is checked, but the text input field is empty, a boolean <code>true</code> value will be captured. The <code>hint</code> or <code>label</code> will be displayed as a placeholder in the text input field.</p> <pre><code>{\n  \"type\": \"CHECKBOX_TEXT\",\n  \"hint\": \"Other (please specify)\"\n}\n</code></pre> <p></p>"},{"location":"input-types/checkbox/","title":"Checkbox","text":"<p>The <code>CHECKBOX</code> input type is designed to capture boolean values. It is depicted as a checkbox that users can either check or uncheck. The value of the checkbox is <code>true</code> when checked and <code>false</code> when unchecked. The <code>CHECKBOX</code> input type is commonly used for multiple-choice questions allowing users to select multiple options. Each <code>CHECKBOX</code> input represents a single option.</p> <pre><code>{\n  \"type\": \"CHECKBOX\",\n  \"name\": \"agree\",\n  \"label\": \"I agree to the terms and conditions\",\n  \"hint\": \"Please read the terms and conditions before agreeing\"\n}\n</code></pre> <p></p> <p>You can also add a <code>REQUIRED</code> validation rule for the checkbox input type. If the checkbox is required, the user must check the checkbox to proceed.</p> <pre><code>{\n  \"type\": \"CHECKBOX\",\n  \"name\": \"agree\",\n  \"label\": \"I agree to the terms and conditions\",\n  \"hint\": \"Please read the terms and conditions before agreeing\",\n  \"validations\": [\n    {\n      \"type\": \"REQUIRED\",\n      \"message\": \"You must agree to the ToC\"\n    }\n  ]\n}\n</code></pre> <p></p>"},{"location":"input-types/dropdown/","title":"Dropdown","text":"<p>The <code>DROPDOWN</code> input type is designed to capture single-choice questions. It is depicted as a dropdown list that users can select. The <code>DROPDOWN</code> input type is commonly used for single-choice questions where users can only select one option.</p> <p>The <code>dropdownInputOptions</code> key is used to specify the options in the dropdown list. The options are represented as an array of strings or an object with key-value pairs. If the dropdown list is an array of strings, the value of the selected option is the same as the displayed text. If the dropdown list is an object with key-value pairs, the value of the selected option is the key of the selected option.</p> PreviewJSON Option1JSON Option2 <p></p> <pre><code>{\n  \"title\": \"How often do you use SurveyCompo?\",\n  \"inputs\": [\n    {\n      \"type\": \"DROPDOWN\",\n      \"hint\": \"-- Please select --\",\n      \"dropdownInputOptions\": [\"Daily\", \"Weekly\", \"Monthly\", \"Less often\"]\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  \"title\": \"How often do you use SurveyCompo?\",\n  \"inputs\": [\n    {\n      \"type\": \"DROPDOWN\",\n      \"hint\": \"-- Please select --\",\n      \"dropdownInputOptions\": {\"daily\":\"Daily\", \"weekly\": \"Weekly\", \"monthly\": \"Monthly\", \"less\":\"Less often\"}\n    }\n  ]\n}\n</code></pre> <p>Alternatively, the <code>dropdownInputPreset</code> key can be used to specify a preset list of options. The following preset options are supported:</p> <ul> <li><code>COUNTRIES</code> - A list of countries. e.g. <code>Afghanistan</code>, <code>Albania</code>, etc.</li> <li><code>MONTHS</code> - A list of months. e.g. <code>January</code>, <code>February</code>, etc.</li> <li><code>MONTHS_SHORT</code> - A list of months in short form. e.g. <code>Jan</code>, <code>Feb</code>, etc.</li> <li><code>MONTH_DAYS</code> - A list of days of the month (from 1 to 31)</li> <li><code>WEEK_DAYS</code> - A list of days of the week. e.g. <code>Sunday</code>, <code>Monday</code>, etc.</li> <li><code>WEEK_DAYS_SHORT</code> - A list of days of the week in short form. e.g. <code>Sun</code>, <code>Mon</code>, etc.</li> <li><code>YEARS</code> - A list of years (from 100 years ago to the current year)</li> </ul> <pre><code>{\n  \"title\": \"Which Country would you like to visit?\",\n  \"inputs\": [\n    {\n      \"type\": \"DROPDOWN\",\n      \"hint\": \"-- Please select --\",\n      \"dropdownInputPreset\": \"COUNTRIES\"\n    }\n  ]\n}\n</code></pre> <p>There a also a special preset in the form of <code>RANGE:START:END:STEP</code>. This preset generates a range of whole numbers from <code>START</code> (inclusive) to <code>END</code> (inclusive) with an optional <code>STEP</code> value. If <code>STEP</code> is not specified, the default value is 1.</p> <pre><code>{\n  \"title\": \"How likely are you to recommend SurveyCompo to a friend or colleague?\",\n  \"inputs\": [\n    {\n      \"type\": \"DROPDOWN\",\n      \"hint\": \"-- Please select --\",\n      \"dropdownInputPreset\": \"RANGE:0:10\"\n    }\n  ]\n}\n</code></pre> <p>Tip</p> <p>The <code>dropdownInputPresetReverse</code> key allows you to reverse the order of preset values. By default, this key is set to <code>false</code>.</p>"},{"location":"input-types/image/","title":"Image","text":"<p>The <code>IMAGE</code> input type is designed for displaying and selecting images within surveys.</p> <p>By default, the <code>IMAGE</code> input behaves similarly to a <code>RADIO</code> input, except for the visual representation. Users can select or deselect the image. When an <code>IMAGE</code> input is selected, a checkmark icon appears at the top right corner of the image. The position of this checkmark icon can be adjusted by setting the <code>imageInputCheckmarkPosition</code> key to <code>BOTTOM</code>.</p> <p>To enable the selection of multiple <code>IMAGE</code> inputs within the same block, set the <code>imageInputMultiple</code> key to <code>true</code>. This setting removes the exclusivity of the selection, allowing users to choose multiple images within the same block.</p> <p>The <code>imageInputPadding</code> key allows you to add additional padding around the image for aesthetic or clarity purposes, while the <code>imageInputNoBorder</code> key removes the box border surrounding the image. This is particularly useful when you prefer to display the image without any border.</p> <p>To adjust the image size and spacing, use the block layout settings. The <code>layoutColumnWidth</code> key sets the width of the column containing the image, while the <code>layoutColumnGap</code> key defines the spacing between columns.</p> PreviewJSON <p></p> <pre><code>{\n  \"title\": \"Which of these images best represents your experience with SurveyCompo?\",\n  \"layoutColumnWidth\": \"80px\",\n  \"layoutColumnGap\": \"1em\",\n  \"inputs\": [\n    {\n      \"type\": \"IMAGE\",\n      \"imageInputSrc\": \"https://surveycompo.github.io/examples/images/face-laughing.svg\",\n      \"imageInputNoBorder\": true,\n      \"label\": \"Excellent\"\n    },\n    {\n      \"type\": \"IMAGE\",\n      \"imageInputSrc\": \"https://surveycompo.github.io/examples/images/face-smile.svg\",\n      \"imageInputNoBorder\": true,\n      \"label\": \"Good\"\n    },\n    {\n      \"type\": \"IMAGE\",\n      \"imageInputSrc\": \"https://surveycompo.github.io/examples/images/face-neutral.svg\",\n      \"imageInputNoBorder\": true,\n      \"label\": \"Average\"\n    },\n    {\n      \"type\": \"IMAGE\",\n      \"imageInputSrc\": \"https://surveycompo.github.io/examples/images/face-frown.svg\",\n      \"imageInputNoBorder\": true,\n      \"label\": \"Bad\"\n    },\n    {\n      \"type\": \"IMAGE\",\n      \"imageInputSrc\": \"https://surveycompo.github.io/examples/images/face-angry.svg\",\n      \"imageInputNoBorder\": true,\n      \"label\": \"terrible\"\n    }\n  ]\n}\n</code></pre>"},{"location":"input-types/likert-matrix/","title":"LikertMatrix","text":"<p>Likert Matrix allow you to combine multiple Likert input with the same options. This is most useful when you need to ask multiple questions that should be rated on the same scale.</p> <p>SurveyCompo automatically groups adjacent Likert inputs with the same options into a matrix. There's no need to specify the matrix explicitly. Likert Matrix requires at least two Likert inputs with the same options to be present in the survey. If there's only one Likert input with options, it will be displayed as a standalone Likert input.</p> <p>Since the Likert Matrix comprises multiple Likert inputs, the associated settings are configured at the containing Block level. You can adjust the matrix table width using the <code>layoutLikertMatrixWidth</code> key (default: '100%'). Additionally, the width of the first column, which contains the labels, can be controlled with the <code>layoutLikertMatrixLabelWidth</code> key (default: '25%').</p> <p>The Likert Matrix, which presents multiple questions in a tabular format, typically requires a larger display area. By default, the block's <code>layoutLikertMatrixMode</code> setting is set to <code>AUTO</code>. This means that on mobile devices or smaller screens, the Likert Matrix automatically adapts to display as individual Likert inputs for a better user experience. However, you can override this behavior. By setting <code>layoutLikertMatrixMode</code> to <code>LIKERT</code>, you can ensure that Likert questions are always displayed as individual inputs. If <code>layoutLikertMatrixMode</code> is set to <code>MATRIX</code>, the Likert Matrix table will be displayed regardless of the screen size. In this case, SurveyCompo will attempt to scale the Likert Matrix table to fit the screen size as needed.</p> PreviewJSON <p></p> <pre><code>{\n  \"title\": \"Please rate your satisfaction with the following aspects of SurveyCompo\",\n  \"inputs\": [\n    {\n      \"type\": \"LIKERT_SCALE\",\n      \"label\": \"User Interface (UI)\",\n      \"likertInputPreset\": \"SATISFACTION\"\n    },\n    {\n      \"type\": \"LIKERT_SCALE\",\n      \"label\": \"Customization Options\",\n      \"likertInputPreset\": \"SATISFACTION\"\n    },\n    {\n      \"type\": \"LIKERT_SCALE\",\n      \"label\": \"Customer Support\",\n      \"likertInputPreset\": \"SATISFACTION\"\n    },\n    {\n      \"type\": \"LIKERT_SCALE\",\n      \"label\": \"Pricing\",\n      \"likertInputPreset\": \"SATISFACTION\"\n    }\n  ]\n}\n</code></pre>"},{"location":"input-types/likert/","title":"Likert","text":"<p>The <code>LIKERT_RATING</code> input type is designed to capture responses on a Likert scale, a widely used psychometric scale in surveys and questionnaires to gauge the level of agreement or disagreement with a statement. The <code>LIKERT_RATING</code> input is depicted as a set of radio inputs that users can select.</p> <p>The <code>likertInputOptions</code> key is used to define the options in the Likert scale. These options can be represented as an array of strings or an object with key-value pairs. If <code>likertInputOptions</code> is an array of strings, the value of the selected option matches the displayed text. However, if <code>likertInputOptions</code> is an object with key-value pairs, the value that gets recorded when an option is selected is the key associated with that option, not the displayed text.</p> <p>Like the <code>DROPDOWN</code> input type, the <code>LIKERT_RATING</code> input type also supports preset options. The <code>likertInputPreset</code> key can be used to specify a preset list of options. The following preset options are supported:</p> <ul> <li><code>AGREEMENT</code> - A 5-point Likert scale for agreement levels. e.g. <code>Strongly Disagree</code>, <code>Disagree</code>, <code>Neither agree nor disagree</code>, <code>Agree</code>, <code>Strongly Agree</code>.</li> <li><code>FREQUENCY</code> - A 5-point Likert scale for frequency levels. e.g. <code>Never</code>, <code>Rarely</code>, <code>Sometimes</code>, <code>Often</code>, <code>Always</code>.</li> <li><code>SATISFACTION</code> - A 5-point Likert scale for satisfaction levels. e.g. <code>Very Dissatisfied</code>, <code>Dissatisfied</code>, <code>Neither dissatisfied nor satisfied</code>, <code>Satisfied</code>, <code>Very Satisfied</code>.</li> <li><code>QUALITY</code> - A 5-point Likert scale for quality levels. e.g. <code>Very Poor</code>, <code>Poor</code>, <code>Acceptable</code>, <code>Good</code>, <code>Very Good</code>.</li> <li><code>IMPORTANCE</code> - A 5-point Likert scale for importance levels. e.g. <code>Very unimportant</code>, <code>Unimportant</code>, <code>Neutral</code>, <code>Important</code>, <code>Very important</code>.</li> <li><code>FAMILIARITY</code> - A 5-point Likert scale for familiarity levels. e.g. <code>Very unfamiliar</code>, <code>Unfamiliar</code>, <code>Somewhat familiar</code>, <code>Familiar</code>, <code>Very familiar</code>.</li> <li><code>AWARENESS</code> - A 5-point Likert scale for awareness levels. e.g. <code>Very unaware</code>, <code>Unaware</code>, <code>Neither aware nor unaware</code>, <code>aware</code>, <code>Very aware</code>.</li> <li><code>LIKELIHOOD</code> - A 5-point Likert scale for likelihood levels. e.g. <code>Very Unlikely</code>, <code>Unlikely</code>, <code>Neutral</code>, <code>Likely</code>, <code>Very Likely</code>.</li> <li><code>CONCERN</code> - A 5-point Likert scale for concern levels. e.g. <code>Very unconcerned</code>, <code>Unconcerned</code>, <code>Neither aware nor Neutral</code>, <code>Concerned</code>, <code>Very concerned</code>.</li> <li><code>DIFFICULTY</code> - A 5-point Likert scale for difficulty levels. e.g. <code>Very easy</code>, <code>Easy</code>, <code>Neutral</code>, <code>Difficult</code>, <code>Very difficult</code>.</li> <li><code>EXTENT</code> - A 5-point Likert scale for extent levels. e.g. <code>Not at all</code>, <code>Slightly</code>, <code>Moderately</code>, <code>Very much</code>, <code>Extremely</code>.</li> </ul> PreviewJSON <p></p> <pre><code>{\n  \"title\": \"Overall, how satisfied are you with SurveyCompo?\",\n  \"inputs\": [\n    {\n      \"type\": \"LIKERT_SCALE\",\n      \"likertInputPreset\": \"SATISFACTION\"\n    }\n  ]\n}\n</code></pre> <p>Tip</p> <p>The <code>likertInputPresetReverse</code> key allows you to reverse the order of preset values. By default, this key is set to <code>false</code>.</p>"},{"location":"input-types/number-scale/","title":"NumberScale","text":"<p>The <code>NUMBER_SCALE</code> input type is designed to capture numerical data on a scale. It is depicted as a scale with a range of numbers that users can select. The <code>NUMBER_SCALE</code> input type is commonly used for capturing numerical data on a scale, such as satisfaction ratings, agreement levels, and likelihood scores.</p> <p>The <code>numberScaleInputMin</code> and <code>numberScaleInputMax</code> keys are used to specify the minimum and maximum values of the scale. The default values are 0 and 10, respectively.</p> <p>The value of <code>numberScaleInputMin</code> should be less than <code>numberScaleInputMax</code>, and the maximum value that <code>numberScaleInputMax</code> can take is 10.</p> <p>The <code>numberScaleInputLabels</code> key assigns labels to the scale. These labels, represented as an array of strings, are evenly distributed across the scale. The <code>numberScaleInputLabelPosition</code> key can be used to determine the labels' placement, with <code>BOTTOM</code> as the default position.</p> PreviewJSON <p></p> <pre><code>\"inputs\": [\n  {\n    \"type\": \"NUMBER_SCALE\",\n    \"numberScaleInputMin\": 0,\n    \"numberScaleInputMax\": 5,\n    \"numberScaleInputLabelPosition\": \"BOTTOM\",\n    \"numberScaleInputLabels\": [\n      \"Not likely\",\n      \"Very Likely\"\n    ]\n  }\n]\n</code></pre>"},{"location":"input-types/overview/","title":"Overview","text":"<p>SurveyCompo supports a variety of input types. Each input type is designed to capture a specific type of data. The following example survey demonstrates the different input types that SurveyCompo supports.</p>"},{"location":"input-types/radio-text/","title":"RadioText","text":"<p>The <code>RADIO_TEXT</code> input type is designed to capture text values. It is represented as a radio button that users can select or deselect, accompanied by a text input field for capturing textual data. The <code>RADIO_TEXT</code> input type is often used in conjunction with other <code>RADIO</code> inputs, typically serving as an 'Other' option that allows users to provide open-ended responses.</p> <p>Info</p> <p>An input of type <code>RADIO_TEXT</code> captures the text value from the text input field. If the radio button is checked, but the text input field is empty, a boolean <code>true</code> value will be captured. The <code>hint</code> or <code>label</code> will be displayed as a placeholder in the text input field.</p> <pre><code>{\n  \"type\": \"RADIO_TEXT\",\n  \"hint\": \"Other (please specify)\"\n}\n</code></pre> <p></p>"},{"location":"input-types/radio/","title":"Radio","text":"<p>The <code>RADIO</code> input type is designed to capture single-choice questions. It is depicted as a radio button that users can select. The value of the checkbox is <code>true</code> when checked and <code>false</code> when unchecked. The <code>RADIO</code> input type is commonly used for single-choice questions where users can only select one option.</p> <pre><code>{\n  \"type\": \"RADIO\",\n  \"label\": \"Online search\"\n}\n</code></pre> <p></p>"},{"location":"input-types/star-scale/","title":"StarScale","text":"<p>The <code>STAR_RATING</code> input type is designed to capture ratings on a scale. It is depicted as a set of stars that users can select. The <code>STAR_RATING</code> input type is commonly used for capturing ratings on a scale, such as satisfaction ratings, agreement levels, and likelihood scores.</p> <p>The <code>starInputCount</code> key is used to specify the maximum number of stars in the rating scale. The default value is 5. The <code>starInputColor</code> determines the color of the stars. The default color is yellow (#f1c40f).</p> PreviewJSON <p></p> <pre><code>\"inputs\": [\n  {\n    \"type\": \"STAR_SCALE\",\n    \"label\": \"Ease of Use:\",\n    \"labelPosition\": \"LEFT\",\n    \"labelWidth\": \"10em\"\n  },\n  {\n    \"type\": \"STAR_SCALE\",\n    \"label\": \"Value for money:\",\n    \"labelPosition\": \"LEFT\",\n    \"labelWidth\": \"10em\"\n  },\n  {\n    \"type\": \"STAR_SCALE\",\n    \"label\": \"Customer support:\",\n    \"labelPosition\": \"LEFT\",\n    \"labelWidth\": \"10em\"\n  }\n]\n</code></pre>"},{"location":"input-types/text/","title":"Text","text":"<p>The <code>TEXT</code> input type is designed to capture short textual data. It is depicted as a text input field that users can type in. The <code>TEXT</code> input type is commonly used for capturing short textual data such as names, email addresses, and phone numbers.</p> <pre><code>{\n  \"type\": \"TEXT\",\n  \"hint\": \"name@example.com\",\n  \"textInputType\": \"EMAIL\"\n}\n</code></pre> <p></p>"},{"location":"input-types/text/#text-label","title":"Text Label","text":"<p>Like other input types, you can specify a <code>label</code> field for the text input. This is typically used when a survey question presents multiple inputs:</p> <pre><code>\"inputs\": [\n  {\n    \"type\": \"TEXT\",\n    \"label\": \"First Name\"\n  },\n  {\n    \"type\": \"TEXT\",\n    \"label\": \"Last Name\"\n  }\n]\n</code></pre> <p></p>"},{"location":"input-types/text/#text-types","title":"Text Types","text":"<p>The <code>TEXT</code> input type supports different text input types. You can specify the <code>textInputType</code> field to define the type of text input field. The following text input types are supported:</p> <p>EMAIL, NUMBER, DATE, DATETIME, TIME, TEXT</p> <ul> <li><code>TEXT</code> - Default text type</li> <li><code>EMAIL</code> - Email input text.</li> <li><code>NUMBER</code> - Number input text</li> <li><code>DATE</code> - Date input text</li> <li><code>DATETIME</code> - Date and time input text</li> <li><code>TIME</code> - Time input text</li> </ul> <p>Info</p> <p>Although assigning a <code>textInputType</code> doesn't inherently enforce the validity of entries for the specified type, it does modify the virtual keyboard layout on most mobile browsers and may prompt warnings. For instance, if <code>EMAIL</code> is selected, the email keyboard layout, including the '@' symbol, will be displayed. If an invalid email is input, a tooltip containing a warning will be shown. For more rigorous validation of input values, consider adding <code>validations</code> rules to the input.</p> <p>The following example demonstrates the <code>TEXT</code> input type with different <code>textInputType</code> values:</p> PreviewJSON <p></p> <pre><code>...\n\"inputs\": [\n  {\n    \"type\": \"TEXT\",\n    \"label\": \"Age (18 ~ 100)\",\n    \"textInputType\": \"NUMBER\",\n    \"textInputMax\": 100,\n    \"textInputMin\": 18\n  },\n  {\n    \"type\": \"TEXT\",\n    \"label\": \"Email\",\n    \"textInputType\": \"EMAIL\"\n  },\n  {\n    \"type\": \"TEXT\",\n    \"label\": \"Member Since\",\n    \"textInputType\": \"DATE\",\n    \"textInputMin\": \"2000-01-01\",\n    \"textInputMax\": \"2025-01-01\"\n  },\n  {\n    \"type\": \"TEXT\",\n    \"label\": \"Booked Time\",\n    \"textInputType\": \"TIME\",\n    \"textInputMin\": \"09:00\",\n    \"textInputMax\": \"17:00\"\n  }\n]\n...\n</code></pre>"},{"location":"input-types/textarea/","title":"Textarea","text":"<p>The <code>TEXTAREA</code> input type is designed to capture long textual data. It is depicted as a text area field that users can type in. The <code>TEXTAREA</code> input type is commonly used for capturing long textual data such as comments, feedback, and descriptions.</p> <p>The <code>textareaInputRows</code> key can be used to specify the number of rows in the textarea. The default value is 5.</p> <pre><code>{\n  \"type\": \"TEXTAREA\",\n  \"hint\": \"Please provide your feedback here\",\n  \"textareaInputRows\": 4\n}\n</code></pre> <p></p>"},{"location":"input-types/toggle/","title":"Toggle","text":"<p>The <code>TOGGLE</code> input type is designed to capture binary data. It is depicted as a toggle switch that users can slide to the left or right. The value of the toggle switch is <code>true</code> when slid to the right and <code>false</code> when slid to the left. The <code>TOGGLE</code> input type is commonly used for capturing binary data such as yes/no questions, true/false statements, and on/off settings.</p> PreviewJSON <p></p> <pre><code>\"inputs\": [\n  {\n    \"type\": \"TOGGLE\",\n    \"label\": \"Promotion\",\n    \"labelPosition\": \"LEFT\",\n    \"labelWidth\": \"10em\"\n  },\n  {\n    \"type\": \"TOGGLE\",\n    \"label\": \"Newsletter\",\n    \"labelPosition\": \"LEFT\",\n    \"labelWidth\": \"10em\"\n  }\n]\n</code></pre>"},{"location":"integration/angular/","title":"Angular.js","text":"<p>Integrating SurveyCompo survey component in a Angular.js project involves a few steps:</p> <ol> <li>Add the SurveyCompo component JavaScript to the HTML page template.</li> <li>Add custom elements schema to the Angular project.</li> <li>Use the survey component in your Angular component as you would with any other HTML element.</li> </ol>"},{"location":"integration/angular/#adding-surveycompo-component-javascript","title":"Adding SurveyCompo Component JavaScript","text":"<p>Include the script tag in the HTML page (typically <code>index.html</code>) header.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;ExampleAngular&lt;/title&gt;\n    &lt;base href=\"/\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n    &lt;link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" /&gt;\n    &lt;!-- You can also add the script in angular.json --&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;app-root&gt;&lt;/app-root&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>You can also add the script to the <code>angular.json</code> configuration file.</p>"},{"location":"integration/angular/#add-custom-elements-schema-to-the-angular-project","title":"Add custom elements schema to the Angular project.","text":"<p>Add the custom elements schema to the <code>schemas</code> array in the <code>app.module.ts</code> file.</p> <pre><code>import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from \"@angular/core\"\nimport { BrowserModule } from \"@angular/platform-browser\"\n\nimport { AppComponent } from \"./app.component\"\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  providers: [],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule {}\n</code></pre> <p>If your project is in standalone mode, you can add the custom elements schema to the <code>app.component.ts</code> file:</p> <pre><code>import {\n  Component,\n  CUSTOM_ELEMENTS_SCHEMA,\n  ElementRef,\n  ViewChild\n} from \"@angular/core\"\nimport { RouterOutlet } from \"@angular/router\"\nimport { exampleJSON } from \"./example\"\n\n@Component({\n  selector: \"app-root\",\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [RouterOutlet],\n  templateUrl: \"./app.component.html\",\n  styleUrl: \"./app.component.css\"\n})\nexport class AppComponent {\n  /* ... */\n}\n</code></pre>"},{"location":"integration/angular/#using-the-survey-component","title":"Using the Survey Component","text":"<p>You can now use <code>survey-compo</code> element anywhere in your <code>src/app/app.component.html</code> template.</p> app.component.htmlapp.component.ts <pre><code>&lt;main&gt;\n  &lt;div class=\"main\"&gt;\n    &lt;h1 class=\"title\"&gt;Angular.js Integration Example&lt;/h1&gt;\n    &lt;div class=\"layout\"&gt;\n      &lt;div class=\"button-group\"&gt;\n        &lt;h3&gt;Load Survey&lt;/h3&gt;\n        &lt;button (click)=\"changeSurvey('survey1')\"&gt;Remote JSON 1&lt;/button&gt;\n        &lt;button (click)=\"changeSurvey('survey2')\"&gt;Remote JSON 2&lt;/button&gt;\n        &lt;button (click)=\"changeSurvey('local')\"&gt;Local JSON attr&lt;/button&gt;\n        &lt;button (click)=\"setSurveyJson()\"&gt;Local JSON prop&lt;/button&gt;\n        &lt;h3&gt;API interactions&lt;/h3&gt;\n        &lt;button (click)=\"resetSurvey()\"&gt;Reset&lt;/button&gt;\n        &lt;button (click)=\"goPrev()\"&gt; &amp;#8592; Prev&lt;/button&gt;\n        &lt;button (click)=\"goNext()\"&gt; &amp;#8594; Next&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div class=\"survey-container\"&gt;\n        &lt;survey-compo #my_survey cache=\"memory\" [src]=\"surveySource\" (surveychange)=\"handleChange($event)\"\n          cache=\"memory\" /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/main&gt;\n&lt;router-outlet /&gt;\n</code></pre> <pre><code>import { Component, CUSTOM_ELEMENTS_SCHEMA, ElementRef, ViewChild } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport {exampleJSON} from './example';\n\nconst surveys: Record&lt;string, unknown&gt; = {\n  survey1: 'https://raw.githubusercontent.com/SurveyCompo/examples/main/examples/inputs/source.json',\n  survey2: 'https://raw.githubusercontent.com/SurveyCompo/examples/main/examples/style/source.json',\n  local: JSON.stringify(exampleJSON),\n};\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  @ViewChild('my_survey') surveycompo: ElementRef| undefined = undefined;\n\n  surveySource = surveys['survey1'];\n\n  changeSurvey = (name: string) =&gt; {\n    this.surveySource =  surveys[name] || ''\n  }\n\n  setSurveyJson = () =&gt; {\n    if (this.surveycompo?.nativeElement) {\n      this.surveycompo.nativeElement.src = exampleJSON;\n    }\n  }\n\n  handleChange = (event:unknown) =&gt; {\n    console.log(event);\n  }\n  resetSurvey = () =&gt; {\n    this.surveycompo?.nativeElement?.api?.reset()\n  }\n  goNext = () =&gt; {\n    this.surveycompo?.nativeElement?.api?.goNext()\n  }\n  goPrev = () =&gt; {\n    this.surveycompo?.nativeElement?.api?.goPrev()\n  }\n}\n</code></pre>"},{"location":"integration/angular/#example","title":"Example","text":"<p>You can refer to the following example repository for a working example of SurveyCompo Angular.js integration. This example demonstrates how to load a survey from remote and local JSON files and interact with the survey component using the API.  View source on GitHub</p> <p></p>"},{"location":"integration/component/","title":"The Survey Component","text":"<p>The Survey Component is a web component that allows you to create surveys with a JSON configuration. It is designed to be easy to use and customizable.</p>"},{"location":"integration/component/#using-the-survey-component","title":"Using the Survey Component","text":"<p>To use the Survey Component, create a JSON file that defines the survey structure and questions. The JSON file is then used by the Survey Component to render the survey. For more details, see the documentation on Survey Models.</p> <p>To render the survey, include the Survey Component in your HTML file and specify the source of the survey JSON file:</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Survey&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo\n      src=\"Survey ID or URL\"\n      cache=\"localhost\"\n      onchange=\"console.log\"\n    /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"integration/component/#survey-component-attributes","title":"Survey Component Attributes","text":"<p>The <code>survey-compo</code> element accepts the following attributes:</p> Attribute Description Example Value <code>src</code> Survey ID, or the URL of the survey JSON file or a JSON string itself. <code>IIYzdICTFtJhQHgmLCzY</code> or <code>https://example.host.com/survey-source.json</code> <code>cache</code> Defines the caching strategy or location. Using <code>localstorage</code> enables persisting the current survey session data after a page refresh. <code>localstorage</code> or <code>memory</code>, default: <code>localstorage</code> <code>onchange</code> The JavaScript function to be called on a survey change event. This should be a string referring to a function name in the <code>window</code> scope. <code>console.log</code> <code>mode</code> By default, survey events are sent to SurveyCompo for analysis and reporting. You can turn this off by setting the <code>mode</code> attribute to <code>demo</code>. <code>live</code> or <code>demo</code>"},{"location":"integration/data-collection/","title":"Data collection","text":""},{"location":"integration/data-collection/#event-tracking-with-surveycompo","title":"Event Tracking with SurveyCompo","text":"<p>By default, SurveyCompo automatically captures all survey events to facilitate data collection and analysis. This default behavior ensures that you receive insights into user interactions without additional setup.</p> <p>if you need to disable the automatic sending of survey events to SurveyCompo, you can do so by modifying the <code>mode</code> attribute. Set this attribute to \"demo\" to disable event tracking. This is useful when you want to test the survey without sending events to SurveyCompo.</p> <p>The following example demonstrates a survey with Event Tracking disabled.</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Survey&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo src=\"[Survey ID or URL]\" mode=\"demo\" /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"integration/data-collection/#sending-all-events-to-your-own-server","title":"Sending All Events To Your Own Server","text":"<p>If you need to collect all survey events for detailed data reporting or other specific purposes, you can define the 'dataEndpoint' key in your Survey JSON configuration. This key specifies the URL of the server where you want to send the survey events. SurveyCompo then sends all events to this server in real-time.</p> <p>The following example demonstrates how to send all survey events to a remote data collection server:</p> <pre><code>{\n  \"name\": \"test\",\n  \"startScreens\": [\n    /** ... **/\n  ],\n  \"pages\": [\n    /** ... **/\n  ],\n  \"completeScreens\": [\n    /** ... **/\n  ],\n  \"dataEndpoint\": \"https://my-server.com/survey-data-endpoint\"\n}\n</code></pre> <p>SurveyCompo uses the <code>navigator.sendBeacon()</code> method to send event data to a server. This method is part of the Beacon API, which allows web pages to send data to a server in the background, independently of the page lifecycle. This ensures the data is sent reliably without blocking the user\u2019s navigation. However, it sends data as a POST request with a content type of <code>text/plain</code>, so the server must be able to handle this format and parse the event data from stringified JSON accordingly.</p> <p>Note</p> <p>To send survey responses to your server, a Premium Plan is required. For more information, visit our Pricing page.</p>"},{"location":"integration/data-collection/#sending-filtered-events-to-your-server","title":"Sending Filtered Events to Your Server","text":"<p>To effectively collect survey responses and performance metrics, you can implement event listeners that capture specific survey events, filter out irrelevant ones, and transmit the necessary data to your server. This server can then store the information in a database or forward it to downstream analytics services for further analysis.</p> <p>The COMPLETE event is triggered when a respondent finishes the survey. The accompanying event detail object includes:</p> <ul> <li>Survey Responses: All answers provided by the respondent.</li> <li>Contextual Information: Useful data such as start and completion timestamps.</li> </ul> <p>The following example demonstrates how to send survey response data to a remote data collection server upon survey completion:</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Survey&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      window.addEventListener(\"surveychange\", (e) =&gt; {\n        const eventDetail = e.detail\n        if (eventDetail.name === \"COMPLETE\") {\n          fetch(\"https://your-data-collection-service.com/responses\", {\n            method: \"POST\",\n            body: eventDetail,\n            headers: {\n              \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n          })\n        }\n      })\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo\n      id=\"my-survey\"\n      src=\"[Survey ID or URL]\"\n      onchange=\"onSurveyChange\"\n    /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The code snippet above sends survey responses to a remote server when the <code>COMPLETE</code> event is triggered. This approach ensures that only the filtered events are transmitted from the frontend to your server. Consequently, your server must handle CORS configurations and address other security concerns to securely receive and process the data.</p> <p>Note</p> <p>Access to the <code>inputs</code> field in the event context requires a Premium Plan. For details, visit the Pricing page.</p> <p>Tip</p> <p>Every survey event includes a unique session ID and timestamp, which are essential for data validation. The session ID uniquely identifies each survey session, enabling you to track individual responses and performance metrics effectively. Additionally, the event's <code>context</code> object contains the session ID along with other valuable information.</p>"},{"location":"integration/data-collection/#data-report","title":"Data Report","text":"<p>If you opt to send data to SurveyCompo, you can view survey responses and performance metrics in real-time in the SurveyCompo App.</p> <p></p>"},{"location":"integration/event-and-api/","title":"Survey Events and API","text":"<p>Survey Events and the API interfaces are pivotal features of the SurveyCompo web component. Survey Events enable listening to various events throughout the survey process, such as initialization, start, completion, or abortion. The API interface offers methods to interact with the survey component, including navigating to the next page, returning to the previous page, or resetting the survey.</p>"},{"location":"integration/event-and-api/#listen-to-survey-events","title":"Listen to Survey Events","text":""},{"location":"integration/event-and-api/#using-addeventlistener","title":"Using <code>addEventListener</code>","text":"<p>The SurveyCompo web component is a custom HTML element. You can listen to its events using the <code>addEventListener</code> method.</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Survey&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo id=\"my-survey\" src=\"Survey ID or URL\" /&gt;\n    &lt;script&gt;\n      document\n        .getElementById(\"my-survey\")\n        .addEventListener(\"surveychange\", (e) =&gt; {\n          // handles survey events here\n          console.log(e)\n        })\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Since survey events bubble up the DOM tree by default, you can also add event listeners to the window using the <code>window.addEventListener</code> method.</p> <pre><code>&lt;script&gt;\n  window.addEventListener(\"surveychange\", (e) =&gt; {\n    // handles survey events here\n    console.log(e)\n  })\n&lt;/script&gt;\n</code></pre>"},{"location":"integration/event-and-api/#using-the-onchange-callback-attribute","title":"Using the <code>onChange</code> callback attribute","text":"<p>The SurveyCompo web component supports the <code>onChange</code> callback attribute. Use this attribute to listen to survey events.</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Survey&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      onSurveyChange = (eventDetail, api) =&gt; {\n        console.log(eventDetails, api)\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo\n      id=\"my-survey\"\n      src=\"[Survey ID or URL]\"\n      onchange=\"onSurveyChange\"\n    /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The <code>onChange</code> callback attribute accepts a string reference to a callback function at the <code>window</code> scope. For example, <code>onSurveyChange</code> is a function defined at the <code>window</code> and can be referenced as <code>window.onSurveyChange</code> or just <code>onSurveyChange</code>. It can also be a reference to a method of a nested object, such as <code>myApp.surveyManager.handleChange</code>.</p> <p>The callback function receives two arguments:</p> <ul> <li><code>eventDetail</code>: An object containing the survey event data, equivalent to the <code>event.detail</code> object for a 'surveychange' event.</li> <li><code>api</code>: An object containing methods to interact with the survey component.</li> </ul>"},{"location":"integration/event-and-api/#surveychange-event","title":"<code>surveychange</code> Event","text":"<p>The <code>surveychange</code> event is a CustomEvent with a <code>type</code> of <code>surveychange</code>. The event <code>detail</code> object contains the following properties:</p> Property Description Optional <code>type</code> Identifies the type of event, fixed to <code>surveychange</code>. No <code>name</code> Specifies the name of the event, for example, <code>INITIALIZE</code>. No <code>time</code> Records the timestamp at which the event occurred, for example, <code>1719912164458</code>. No <code>target.survey</code> Provides the survey (<code>including</code> <code>id</code>, <code>name</code>, <code>customRef</code>) associated with the event. No <code>target.screen</code> Provides the screen (<code>including</code> <code>id</code>, <code>name</code>, <code>customRef</code>) associated with the event. Yes <code>target.page</code> Provides the page (<code>including</code> <code>id</code>, <code>name</code>, <code>customRef</code>) associated with the event. Yes <code>target.block</code> Provides the block (<code>including</code> <code>id</code>, <code>name</code>, <code>customRef</code>) associated with the event. Yes <code>target.input</code> Provides the input (<code>including</code> <code>id</code>, <code>name</code>, <code>customRef</code>, group, value) for the event. Yes <code>context</code> Provides a Context object containing session-specific data. No <p>The event <code>context</code> object contains the following properties:</p> Property Description <code>pageCount</code> Total number of pages in the survey that are visible to the respondent. <code>pageIndex</code> Index of the current page within the survey, starting from <code>0</code>. <code>pageErrors</code> An array containing error messages specific to the current page. <code>progress</code> Percentage progress increment contributed by the event. Note this is NOT the percentage of survey has been completed. <code>errorTs</code> Timestamp marking the occurrence of a visible error on the current page, formatted as a Unix timestamp. <code>initTs</code> Timestamp for when the survey was initialized, formatted as a Unix timestamp. <code>startTs</code> Timestamp for when the survey was started by the respondent, formatted as a Unix timestamp. <code>completeTs</code> Timestamp for when the survey was completed by the respondent, formatted as a Unix timestamp. <code>finalTs</code> Timestamp for when the survey was finalized, indicating the end of the survey process, formatted as a Unix timestamp. <code>abortTs</code> Timestamp for when the survey was aborted by the respondent, formatted as a Unix timestamp. <code>sessionId</code> A unique identifier for the current survey session, useful for tracking and analytics purposes. <code>variables</code> A dictionary of variables that have been passed to the current survey session, allowing for customized survey experiences. <code>survey</code> An object containing the <code>id</code> and <code>name</code> of the current survey, providing context about which survey is being referenced. <code>inputs</code> An array of objects representing the responses given by the respondent, including the id, name, and value of each response. Premium Plan required. <p>Note</p> <p>Access to the <code>inputs</code> field in the event context requires a Premium Plan. For details, visit the Pricing page.</p>"},{"location":"integration/event-and-api/#event-names","title":"Event Names","text":"<p>The <code>surveychange</code> event <code>name</code> property is a string that represents the event name. The following are the possible event names:</p> Event Name Description <code>INITIALIZE</code> Triggered when the survey initializes, preparing it for the respondent. <code>START</code> Marks the beginning of the survey, presenting the first page to the respondent. <code>START_OK</code> Occurs when the respondent clicks the OK button on the start screen. <code>START_CANCEL</code> Occurs when the respondent clicks the CANCEL button on the start screen. <code>INPUT_CHANGE</code> Fired whenever a respondent changes an input value within the survey. <code>NEXT_PAGE_GO</code> Advances the respondent to the next page in the survey sequence. <code>PREV_PAGE_GO</code> Takes the respondent back to the previous page in the survey sequence. <code>PAGE_GO</code> Directs the respondent to a new page by ID, an action exclusively triggered via the API. <code>COMPLETE</code> Signifies the survey's completion, after the respondent finishes the last page. <code>COMPLETE_OK</code> Occurs when the respondent clicks the OK button on the completion screen. <code>COMPLETE_CANCEL</code> Occurs when the respondent clicks the CANCEL button on the completion screen. <code>FINALIZE</code> Occurs when the survey is finalized, typically after clicking a button on the completion screen. <code>SURVEY_RESET</code> Resets the survey, starting a new session, an action exclusively triggered via the API. <code>SURVEY_CLOSE</code> Fired when the survey's close button is clicked. <code>ABORT</code> Indicates the survey has been aborted, redirecting the respondent to a disqualification or abort screen. <code>ABORT_OK</code> Occurs when the respondent clicks the OK button on an abort screen. <code>ABORT_CANCEL</code> Occurs when the respondent clicks the CANCEL button on an abort screen. <code>ERROR</code> Indicates an error has occurred at any point during the survey process."},{"location":"integration/event-and-api/#api-interface","title":"API Interface","text":"<p>When using the <code>onChange</code> callback attribute, we mentioned the <code>api</code> interface, which provides methods to interact with the survey component. The available methods include:</p> API Method Description <code>goNext()</code> Advances the survey to the next page. <code>goPrev()</code> Returns the survey to the previous page. <code>goPage(pageId: string)</code> Navigates directly to a specified page, identified by its <code>pageId</code>. <code>reset()</code> Resets the survey, clearing all responses and starting a fresh session. <p>You can also obtain the <code>api</code> interface from the survey component instance. Here's an example of using the <code>api</code> interface to interact with the survey component. It resets the survey when the <code>SURVEY_CLOSE</code> event is emitted, allowing users to start a new session by clicking the close button.</p> HTML (using callback)HTML (using addEventListener)Preview <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Survey&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      onSurveyChange = (eventDetail, api) =&gt; {\n        if (eventDetail.name === \"SURVEY_CLOSE\") {\n          api.reset()\n        }\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo\n      id=\"my-survey\"\n      src=\"https://example.host.com/survey-source.json\"\n      onchange=\"onSurveyChange\"\n    /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Survey&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      window.addEventListener(\"surveychange\", (e) =&gt; {\n        const eventDetail = e.detail;\n        const api = document.getElementById(\"my-survey\").api;\n        if (eventDetail.name === \"SURVEY_CLOSE\") {\n          api.reset()\n        }\n      });\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;survey-compo\n      id=\"my-survey\"\n      src=\"https://example.host.com/survey-source.json\"\n      onchange=\"onSurveyChange\"\n    /&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p> </p>"},{"location":"integration/react/","title":"React.js","text":"<p>Integrating SurveyCompo survey component in a React.js project involves a few steps:</p> <ol> <li>Add the SurveyCompo component JavaScript to the HTML page template.</li> <li>If your project uses TypeScript, declare the SurveyCompo component type.</li> <li>Use the survey component in your React component as you would with any other HTML element.</li> </ol>"},{"location":"integration/react/#adding-surveycompo-component-javascript","title":"Adding SurveyCompo Component JavaScript","text":"<p>Include the script tag in the HTML page (typically <code>index.html</code>) header.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;link rel=\"icon\" type=\"image/png\" href=\"/logo.png\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;SurveyCompo React.js Integration Example&lt;/title&gt;\n    &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script type=\"module\" src=\"/src/main.tsx\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"integration/react/#declaring-the-surveycompo-component-type","title":"Declaring the SurveyCompo Component Type","text":"<p>For TypeScript projects, add component type declarations. Create a <code>types.d.ts</code> file in the project root directory and declare the SurveyCompo component type.</p> <pre><code>// types.d.ts\nimport * as React from \"react\"\n\ninterface SurveyCompoAttributes\n  extends React.DetailedHTMLProps&lt;\n    React.HTMLAttributes&lt;HTMLElement&gt;,\n    HTMLElement\n  &gt; {\n  src?: string | unknown\n  class?: string\n  ref?: unknown\n  onchange?: unknown\n  onload?: unknown\n  cache?: \"memory\" | \"localstorage\"\n}\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"survey-compo\": SurveyCompoAttributes\n    }\n  }\n}\n</code></pre>"},{"location":"integration/react/#using-the-survey-component","title":"Using the Survey Component","text":"<p>To use the SurveyCompo component in a React component, create a new component and use the <code>survey-compo</code> element.</p> <pre><code>import { useEffect, useRef, useState } from \"react\"\nimport \"./App.css\"\nimport localExample from \"./example.json\"\n\nfunction App() {\n  const surveys: Record&lt;string, unknown&gt; = {\n    survey1:\n      \"https://raw.githubusercontent.com/SurveyCompo/examples/main/examples/inputs/source.json\",\n    survey2:\n      \"https://raw.githubusercontent.com/SurveyCompo/examples/main/examples/style/source.json\",\n    local: JSON.stringify(localExample)\n  }\n\n  const [sourceName, setSourceName] = useState(\"survey1\")\n\n  const surveySource = surveys[sourceName]\n  const surveyElement = useRef&lt;{\n    src: unknown\n    api: { reset: () =&gt; void; goNext: () =&gt; void; goPrev: () =&gt; void }\n  }&gt;()\n\n  const onSurveyChange = (event: Event) =&gt; {\n    const customEventDetail = (event as CustomEvent).detail\n    console.log(customEventDetail)\n  }\n\n  const resetSurvey = () =&gt; {\n    surveyElement.current?.api.reset()\n  }\n  const goNext = () =&gt; {\n    surveyElement.current?.api.goNext()\n  }\n  const goPrev = () =&gt; {\n    surveyElement.current?.api.goPrev()\n  }\n\n  const setDataToInstance = () =&gt; {\n    if (surveyElement.current) {\n      surveyElement.current.src = localExample\n    }\n  }\n\n  useEffect(() =&gt; {\n    window.addEventListener(\"surveychange\", onSurveyChange)\n    return () =&gt; {\n      window.removeEventListener(\"surveychange\", onSurveyChange)\n    }\n  }, [sourceName, onSurveyChange])\n\n  return (\n    &lt;&gt;\n      &lt;h1 className=\"title\"&gt;React.js Integration Example&lt;/h1&gt;\n      &lt;div className=\"layout\"&gt;\n        &lt;div className=\"button-group\"&gt;\n          &lt;h3&gt;Load Survey&lt;/h3&gt;\n          &lt;button onClick={() =&gt; setSourceName(\"survey1\")}&gt;\n            Remote JSON 1\n          &lt;/button&gt;\n          &lt;button onClick={() =&gt; setSourceName(\"survey2\")}&gt;\n            Remote JSON 2\n          &lt;/button&gt;\n          &lt;button onClick={() =&gt; setSourceName(\"local\")}&gt;\n            Local JSON attr\n          &lt;/button&gt;\n          &lt;button onClick={() =&gt; setDataToInstance()}&gt;Local JSON prop&lt;/button&gt;\n          &lt;h3&gt;API interactions&lt;/h3&gt;\n          &lt;button onClick={() =&gt; resetSurvey()}&gt;Reset&lt;/button&gt;\n          &lt;button onClick={() =&gt; goPrev()}&gt; &amp;#8592; Prev&lt;/button&gt;\n          &lt;button onClick={() =&gt; goNext()}&gt; &amp;#8594; Next&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div className=\"survey-container\"&gt;\n          &lt;survey-compo ref={surveyElement} cache=\"memory\" src={surveySource} /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"integration/react/#example","title":"Example","text":"<p>You can refer to the following example repository for a working example of SurveyCompo React.js integration. This example demonstrates how to load a survey from remote and local JSON files and interact with the survey component using the API.  View source on GitHub</p> <p></p>"},{"location":"integration/vue/","title":"Vue.js","text":"<p>Integrating SurveyCompo survey component in a Vue.js project involves a few steps:</p> <ol> <li>Add the SurveyCompo component JavaScript to the HTML template.</li> <li>Skipping component resolution for custom elements.</li> <li>Use the survey component in your Vue component as you would with any other HTML element.</li> </ol>"},{"location":"integration/vue/#adding-surveycompo-component-javascript","title":"Adding SurveyCompo Component JavaScript","text":"<p>Include the script tag in the HTML page (typically <code>index.html</code>) header.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"&gt;\n  &lt;link rel=\"icon\" href=\"&lt;%= BASE_URL %&gt;favicon.ico\"&gt;\n  &lt;script async src=\"https://tag.surveycompo.com/v1.js\"&gt;&lt;/script&gt;\n  &lt;title&gt;\n    &lt;%= htmlWebpackPlugin.options.title %&gt;\n  &lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div id=\"app\"&gt;&lt;/div&gt;\n  &lt;!-- built files will be auto injected --&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"integration/vue/#skipping-component-resolution","title":"Skipping Component Resolution","text":"<p>By default, Vue will attempt to resolve a non-native HTML tag as a registered Vue component before falling back to rendering it as a custom element. This will cause Vue to emit a \"failed to resolve component\" warning during development. To let Vue know that certain elements should be treated as custom elements and skip component resolution, we can specify the compilerOptions.isCustomElement option.</p> <pre><code>const { defineConfig } = require('@vue/cli-service')\nmodule.exports = defineConfig({\n  transpileDependencies: true,\n  chainWebpack: config =&gt; {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap(options =&gt; ({\n        ...options,\n        compilerOptions: {\n          // treat survey-compo tag as custom element\n          isCustomElement: tag =&gt; tag === 'survey-compo'\n        }\n      }))\n }})\n</code></pre> <p>Depends how  your Vue project is set up, you may need to set the <code>isCustomElement</code> option in a different way. For more details, refer to the Vue documentation.</p>"},{"location":"integration/vue/#using-the-survey-component","title":"Using the Survey Component","text":"<p>You can now use <code>survey-compo</code> element anywhere in your component templates.</p> <pre><code>// SurveyExample.vue\n&lt;template&gt;\n  &lt;div class=\"main\"&gt;\n    &lt;h1 class=\"title\"&gt;Vue.js Integration Example&lt;/h1&gt;\n    &lt;div class=\"layout\"&gt;\n      &lt;div class=\"button-group\"&gt;\n        &lt;h3&gt;Load Survey&lt;/h3&gt;\n        &lt;button @click=\"setSurvey('survey1')\"&gt;Remote JSON 1&lt;/button&gt;\n        &lt;button @click=\"setSurvey('survey2')\"&gt;Remote JSON 2&lt;/button&gt;\n        &lt;button @click=\"setLocalSurveyByAttr()\" &gt;Local JSON attr&lt;/button&gt;\n        &lt;button @click=\"setLocalSurveyByProp()\" &gt;Local JSON prop&lt;/button&gt;\n        &lt;h3&gt;API interactions&lt;/h3&gt;\n        &lt;button @click=\"reset()\"&gt;Reset&lt;/button&gt;\n        &lt;button @click=\"goPrev()\"&gt; &amp;#8592; Prev&lt;/button&gt;\n        &lt;button @click=\"goNext()\"&gt; &amp;#8594; Next&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div class=\"survey-container\"&gt;\n        &lt;survey-compo ref=\"surveycompo\" cache=\"memory\" :src=\"surveySource\" /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport {exampleJSON} from './example'\nconst surveys = {\n  survey1: 'https://raw.githubusercontent.com/SurveyCompo/examples/main/examples/inputs/source.json',\n  survey2: 'https://raw.githubusercontent.com/SurveyCompo/examples/main/examples/style/source.json',\n  local: JSON.stringify(exampleJSON),\n};\nexport default {\n  name: 'SurveyExample',\n  data() {\n    return {\n      surveySource: 'https://raw.githubusercontent.com/SurveyCompo/examples/main/examples/basic/source.json',\n      memory: true\n    }\n  },\n  methods: {\n    setSurvey(surveyName) {\n      this.surveySource = surveys[surveyName];\n    },\n    setLocalSurveyByAttr() {\n      this.surveySource = JSON.stringify(exampleJSON);\n    },\n    setLocalSurveyByProp() {\n      this.$refs.surveycompo.src = exampleJSON;\n    },\n    reset() {\n      this.$refs.surveycompo.api.reset();\n    },\n    goNext() {\n      this.$refs.surveycompo.api.goNext();\n    },\n    goPrev() {\n      this.$refs.surveycompo.api.goPrev();\n    },\n  }\n}\n&lt;/script&gt;\n\n&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;\n&lt;style scoped&gt;\n.main {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.layout {\n  display: flex;\n  flex-direction: row;\n  margin: 0 auto;\n  gap: 2rem;\n  width: fit-content;\n}\n\n.title {\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n}\n\n.button-group {\n  display: flex;\n  gap: 0.5rem;\n  flex-direction: column;\n}\n\n.survey-container {\n  border: 1px solid gray;\n  width: 320px;\n  height: 500px;\n  margin-bottom: 1rem;\n}\n\n&lt;/style&gt;\n</code></pre>"},{"location":"integration/vue/#example","title":"Example","text":"<p>You can refer to the following example repository for a working example of SurveyCompo Vue.js integration. This example demonstrates how to load a survey from remote and local JSON files and interact with the survey component using the API.  View source on GitHub</p> <p></p>"},{"location":"integration/webhooks/","title":"Webhooks","text":"<p>Webhooks are a method for your application to receive real-time notifications when a survey submission event occurs. SurveyCompo sends a <code>POST</code> request to the specified webhook URL with the survey response data in the request body.</p> <p>Note</p> <p>Webhooks only function when you choose to send all survey events to SurveyCompo.</p>"},{"location":"integration/webhooks/#webhook-requests","title":"Webhook Requests","text":"<p>SurveyCompo will retry the request up to five times in case of network errors. It is your responsibility to handle the webhook requests and ensure that the data is processed correctly and securely.</p> <p>The request body contains the survey response data in JSON format.</p> Fields Description <code>teamId</code> Your team ID <code>sessionId</code> Survey session ID. You can use this to uniquely identify a survey session. <code>surveyId</code> Survey ID <code>startTs</code> Timestamp when the survey started (i.e., when the first page was loaded) <code>completeTs</code> Timestamp when the survey was completed (i.e., when the last page was finished) <code>initTs</code> Timestamp when the survey was initialized (i.e., when the start screen was shown) <code>finalTs</code> Timestamp when the survey was finalized (i.e., when the complete screen button was clicked) <code>variables</code> Custom variables set, if any <code>inputs</code> An array of survey inputs with responded values <p>Each input response has the following fields:</p> Fields Description <code>id</code> Input ID <code>group</code> An optional group name assigned to the input <code>customRef</code> Custom reference assigned to the input, if set <code>value</code> Value selected or entered by the respondent"},{"location":"integration/webhooks/#setting-up-webhooks","title":"Setting up Webhooks","text":"<p>To set up a webhook for a survey, visit the survey settings page and add the webhook URL.</p> <p></p>"},{"location":"integration/webhooks/#a-slack-example","title":"A Slack Example","text":"<p>Here is an example of a webhook that sends survey responses to a Slack channel. Learn more about sending messages to Slack using incoming webhook.</p> <p></p> <p>SurveyCompo detects the Slack webhook and applies basic formatting to post a message to the target Slack channel with the response data.</p>"},{"location":"miscellaneous/browser-supports/","title":"Browser Support","text":""},{"location":"miscellaneous/browser-supports/#supported-browsers","title":"Supported Browsers","text":"<p>SurveyCompo surveys are compatible with all modern browsers on desktop and mobile devices. Specifically, SurveyCompo surveys have been tested on the following browsers:</p> <ul> <li>Google Chrome (version 79+)</li> <li>Mozilla Firefox (version 65+)</li> <li>Apple Safari (version 12+)</li> <li>Microsoft Edge (version 79+)</li> <li>Opera (version 58+)</li> <li>Samsung Internet (version 10+)</li> </ul> <p>SurveyCompo uses modern web technologies to provide a fast and responsive survey experience. Legacy browsers like Internet Explorer and Classic Edge are not supported due to non-standard DOM behavior.</p>"},{"location":"miscellaneous/browser-supports/#detecting-browser-support","title":"Detecting Browser Support","text":"<p>To ensure compatibility, use the following feature detection code to check if the browser supports SurveyCompo:</p> <pre><code>// Check if the browser supports SurveyCompo\nif (typeof globalThis === 'undefined') {\n  // SurveyCompo is not supported\n} else {\n  // SurveyCompo is supported\n}\n</code></pre>"},{"location":"miscellaneous/feedback-and-issues/","title":"Feedback & Issues","text":"<p>Your feedback is essential to improving SurveyCompo. If you encounter any issues, please report them so we can address and resolve them promptly. Additionally, we welcome any suggestions or feature requests you may have to enhance your experience with our product.</p> <p>To report an issue, provide feedback, or request a new feature, please create an issue on our GitHub issues page. When submitting an issue, include as much detail as possible to help us understand and resolve it efficiently. Alternatively, you can send an email to support@surveycompo.com with your feedback or issue details.</p> <p>Thank you for helping us make SurveyCompo better!</p>"},{"location":"tutorial/building/","title":"Building A Survey","text":"<p>Welcome to the Getting Started Tutorial!</p> <p>In this guide, we\u2019ll walk you through building a Product Satisfaction Survey using SurveyCompo. This type of survey is an excellent tool for gathering valuable customer feedback to better understand their needs and preferences. Throughout the tutorial, we'll cover the essentials of creating a survey, adding conditional logic, and leveraging advanced features to customize the survey experience to your requirements.</p>"},{"location":"tutorial/building/#the-product-satisfaction-survey","title":"The Product Satisfaction Survey","text":"<p>The survey starts with a welcome screen and concludes with a thank-you message. To gather demographic insights, we will ask participants about their age and preferred method of contact. Additionally, we\u2019ll inquire about how participants learned about our product or service. The survey will assess product satisfaction using a rating scale and open-ended feedback questions. Participants under the age of 18 will be ineligible to complete the survey.</p> <p>Let's review the questions that will be included in our interactive survey:</p>"},{"location":"tutorial/building/#about-you","title":"About You","text":"<ul> <li>Question 1: Please enter your age.</li> <li>Question 2: What is your preferred method of contact?</li> <li>Question 3: How did you hear about us?</li> </ul>"},{"location":"tutorial/building/#product-satisfaction","title":"Product Satisfaction","text":"<ul> <li>Question 4: Overall, how satisfied are you with our product?</li> <li>Question 5: What do you like most about our product? (if satisfied)</li> <li>Question 6: What could be improved about our product? (if not satisfied)</li> </ul> <p>Tip</p> <p>If you don\u2019t have a SurveyCompo account yet, you can register for a free one at SurveyCompo. Once registered, log in to the SurveyCompo Portal to start creating surveys.</p>"},{"location":"tutorial/building/#surveycompo-survey-builder","title":"SurveyCompo Survey Builder","text":"<p>The SurveyCompo Survey Builder is a powerful tool for creating and managing surveys. Whether you prefer using the Visual Editor or working directly with JSON, our builder provides the flexibility and ease of use to suit your needs.</p> <p></p> <p>Key Features:</p> <ul> <li>Intuitive Visual Editor: Build surveys with a drag-and-drop interface that requires no coding skills.</li> <li>Advanced JSON Editing: Create and modify survey definitions directly in JSON using a feature-rich editor with auto-formatting, code hints, and validation.</li> <li>Real-time Preview: Instantly view your survey as it takes shape while editing the JSON code.</li> <li>Survey Templates: Jumpstart survey creation with a library of pre-made templates tailored to common use cases.</li> <li>Theme Editor: Customize the look and feel of your survey with personalized colors, fonts, and styles.</li> <li>Import/Export: Easily import JSON survey files or export your surveys for offline use.</li> </ul> <p>You can easily access the Survey Builder at https://app.surveycompo.com/surveys.</p> <p>The following sections of this tutorial will explore the JSON data model used to define surveys in SurveyCompo. We will focus less on the visual interface of the Survey Builder itself. While the Survey Builder offers powerful tools for creating surveys, understanding the JSON data model gives you direct control and greater flexibility in designing your survey.</p>"},{"location":"tutorial/building/#creating-a-new-survey","title":"Creating a New Survey","text":"<p>To create a new survey, click the New Survey button on the SurveyCompo App. You can start from scratch or choose from a list of pre-designed templates. For this tutorial, we will begin by creating a new survey from scratch.</p> <p>A minimal survey JSON source looks like this:</p> <pre><code>{\n  \"name\": \"Product Satisfaction Survey\"\n}\n</code></pre> <p>The survey JSON source is a structured document that defines the survey's questions, answers, and logic. This JSON serves as the foundation for your survey and is used to build it within the Survey Builder. The <code>name</code> field is mandatory and is the only required key. It appears in the SurveyCompo Portal to help identify your survey.</p> <p>Next, let\u2019s add the start screen.</p>"},{"location":"tutorial/building/#adding-the-start-screen","title":"Adding the Start Screen","text":"<p>The start screen is the first thing participants see when they begin the survey, introducing them and setting the stage for the questions ahead.</p> <p>Here's an example of the JSON source with a start screen:</p> JSON CodeVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    {\n      \"header\": \"Welcome to Our Survey!\",\n      \"description\": \"Thank you for participating.\",\n      \"okButtonLabel\": \"Start Survey\"\n    }\n  ]\n}\n</code></pre> <p></p> <p>The JSON for the start screen includes the following keys:</p> <ul> <li><code>header</code>: The title displayed on the welcome screen.</li> <li><code>description</code>: The introductory message shown to participants.</li> <li><code>okButtonLabel</code>: The text on the button participants click to begin the survey.</li> </ul> <p>The <code>startScreens</code> key is an array that can hold multiple start screens. If there are multiple screens, one is randomly selected when the survey loads. In this example, we only have a single screen.</p> <p>Info</p> <p>For a comprehensive list of screen properties, refer to the Screen documentation.</p> <p>Let's preview the welcome screen in the Survey Builder.</p> <p></p>"},{"location":"tutorial/building/#adding-the-first-page","title":"Adding the First Page","text":"<p>The first page of the survey will ask participants to provide their personal info. We will add a text input field for this question.</p> <p>Here\u2019s the JSON source for the first page:</p> JSON CodeVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"About You\",\n      \"blocks\": [\n        {\n          \"title\": \"Please enter your age\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXT\",\n              \"textInputType\": \"NUMBER\"\n            }\n          ]\n        },\n        {\n          \"title\": \"What is your preferred method of contact?\",\n          \"inputs\": [\n            {\n              \"type\": \"DROPDOWN\",\n              \"hint\": \"Please select\",\n              \"dropdownInputOptions\": [\"Email\", \"Phone\", \"Text Message\"]\n            }\n          ]\n        },\n        {\n          \"title\": \"How did you hear about us?\",\n          \"inputs\": [\n            {\n              \"type\": \"CHECKBOX\",\n              \"label\": \"Friend/Family\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"label\": \"Online Ad\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"label\": \"Social Media\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"label\": \"Search Engine\"\n            },\n            {\n              \"type\": \"CHECKBOX_TEXT\",\n              \"label\": \"Others\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p></p> <p>The JSON source for the first page includes the following keys:</p> <ul> <li><code>header</code>: The page header.</li> <li><code>blocks</code>: An array containing three blocks, each representing a section of the page with questions or content.</li> </ul> <p>Each block includes:</p> <ul> <li><code>title</code>: The title of the block, which serves as the question text.</li> <li><code>inputs</code>: An array of input fields within the block.</li> </ul> <p>For the 'Age' question input:</p> <ul> <li><code>type</code>: Specifies it as a text input field.</li> <li><code>textInputType</code>: Indicates that it expects a number input.</li> </ul> <p>For the 'Method of Contact' question input:</p> <ul> <li><code>type</code>: Specifies it as a dropdown input field.</li> <li><code>hint</code>: Displays a hint within the dropdown.</li> <li><code>dropdownInputOptions</code>: An array offering the options for the dropdown.</li> </ul> <p>For the 'How did you hear about us?' question input:</p> <ul> <li><code>type</code>: Specifies it as a checkbox input field.</li> <li><code>label</code>: Displays the label or question text for the input field.</li> </ul> <p>Note that the last input field uses <code>CHECKBOX_TEXT</code>, which includes a text input field for additional participant information.</p> <p>Tip</p> <p>The values for the <code>type</code> and <code>textInputType</code> keys are case-insensitive. You can use uppercase, lowercase, or a mix of both, but for consistency, it's recommended to use UPPERCASE.</p> <p>Info</p> <p>The <code>type</code> key specifies the type of input field displayed in the survey. SurveyCompo supports various input types such as text, radio buttons, checkboxes, dropdowns, and more. For a complete list of input properties, refer to the Input documentation.</p> <p>Let\u2019s add the first page into our survey JSON source and preview it in the Survey Builder.</p> <p></p>"},{"location":"tutorial/building/#adding-the-second-page","title":"Adding the Second Page","text":"<p>The second page of the survey will prompt participants to rate their overall satisfaction with our product.</p> <p>Here's the JSON source for the second page:</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    /* ... First Page ... */\n    {\n      \"header\": \"Product Satisfaction\",\n      \"blocks\": [\n        {\n          \"title\": \"Overall, how satisfied are you with our product?\",\n          \"inputs\": [\n            {\n              \"type\": \"LIKERT_SCALE\",\n              \"likertInputPreset\": \"SATISFACTION\"\n            }\n          ]\n        },\n        {\n          \"title\": \"What do you like most about our product?\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXTAREA\",\n              \"hint\": \"Please share your thoughts\"\n            }\n          ]\n        },\n        {\n          \"title\": \"What could be improved about our product?\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXTAREA\",\n              \"hint\": \"Please share your thoughts\"\n            }\n          ]\n        }\n      ],\n      \"nextButtonLabel\": \"Submit\"\n    }\n  ]\n}\n</code></pre> <p></p> <p>The second page of the survey includes three blocks/questions:</p> <ul> <li> <p>The <code>Overall satisfaction</code> question uses an input of type <code>LIKERT_SCALE</code>. Instead of specifying options directly with <code>likertInputOptions</code>, SurveyCompo provides presets to simplify survey creation. In this case, we use <code>likertInputPreset</code> to apply a 5-point satisfaction scale called <code>SATISFACTION</code>.</p> </li> <li> <p>The following two questions ask participants for open-ended feedback on what they like most and what could be improved about the product. These questions use a <code>TEXTAREA</code> input field.</p> </li> </ul> <p>Info</p> <p>The <code>LIKERT_SCALE</code> input acts similarly to a collection of <code>RADIO</code> inputs, making it an effective tool for gathering feedback on a scale. SurveyCompo offers several Likert scale presets such as <code>SATISFACTION</code>, <code>LIKELIHOOD</code>, and <code>AGREEMENT</code> to simplify survey creation. For a full list of available Likert scale presets, refer to the Likert Scale documentation.</p> <p>Let\u2019s preview the second page in the Survey Builder.</p> <p></p> <p>The <code>nextButtonLabel</code> key is set to \"Submit,\" serving as the label on the button participants click to proceed to the next page. If left unspecified, the default label is \"Next.\" As multiple pages are added, a navigation bar appears at the bottom of each page. This bar allows participants to navigate between pages and shows the current page number alongside the total number of pages in the survey. To hide the navigation bar, use the <code>uiShowNavigation</code> survey key. For more details, refer to the Survey Data Key documentation.</p>"},{"location":"tutorial/building/#adding-the-completion-screen","title":"Adding the Completion Screen","text":"<p>The final screen of the survey is the completion screen. It provides participants with a closing message and confirms that their responses have been recorded.</p> <p>Here\u2019s the JSON source for the completion screen:</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    /* ... */\n  ],\n  \"completeScreens\": [\n    {\n      \"header\": \"Thank You!\",\n      \"description\": \"Your feedback is greatly appreciated.\",\n      \"okButtonLabel\": \"Close\"\n    }\n  ]\n}\n</code></pre> <p></p> <p>Let's preview the complete screen in the Survey Builder.</p> <p></p>"},{"location":"tutorial/building/#randomization","title":"Randomization","text":"<p>SurveyCompo supports randomizing questions and answer options, a valuable feature for reducing bias and providing each participant with a unique survey experience. Randomization can be applied to pages, blocks, and inputs. For more detailed guidance on implementing randomization, refer to the Randomization documentation.</p> <p>In this tutorial, we will add randomization to the \"How did you hear about us?\" question, ensuring the input options are randomized to avoid order bias.</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"Product Satisfaction\",\n      \"blocks\": [\n        /* ... first block ...  */\n        /* ... second block ... */\n        {\n          \"title\": \"How did you hear about us?\",\n          \"inputs\": [\n            {\n              \"type\": \"CHECKBOX\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Friend/Family\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Online Ad\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Social Media\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Search Engine\"\n            },\n            {\n              \"type\": \"CHECKBOX_TEXT\",\n              \"label\": \"Others\"\n            }\n          ]\n        }\n      ]\n    }\n    /* ... Second Page ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p></p> <p>The <code>randomWithinGroup</code> key is a powerful feature for introducing randomization within your survey. By assigning the same <code>randomWithinGroup</code> string value to a group of inputs, you can shuffle their order while keeping other questions in sequence.</p> <p>In our example, all inputs except the final \"Others\" option are grouped for randomization. This ensures that the \"Others\" input consistently appears at the end of the list, regardless of the randomization applied to the preceding inputs.</p> <p>It's important to note that randomization occurs when the survey loads and remains consistent throughout the survey session. To view the effects of randomization, simply refresh the page.</p> <p>Let\u2019s preview the randomization in the Survey Builder:</p> <p></p>"},{"location":"tutorial/building/#disqualification","title":"Disqualification","text":"<p>SurveyCompo supports disqualification logic to exclude participants who do not meet specific criteria. This feature ensures that only eligible participants complete the survey. You can disqualify participants based on their inputs and variables. For detailed instructions on implementing disqualification logic, refer to the Disqualification documentation.</p> <p>In this tutorial, we will integrate disqualification logic into the survey to exclude participants under the age of 18. The disqualification logic will be applied to the \"Age\" input and an Abort Screen.</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"About You\",\n      \"blocks\": [\n        {\n          \"title\": \"Please enter your age\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXT\",\n              \"id\": \"age\",\n              \"textInputType\": \"NUMBER\"\n            }\n          ]\n        }\n        /* ... other blocks ... */\n      ]\n    }\n    /* ... other pages ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    {\n      \"header\": \"Disqualified\",\n      \"description\": \"You must be 18 years or older to participate.\",\n      \"okButtonLabel\": \"Close\",\n      \"visibleIf\": \"#age &lt; 18\"\n    }\n  ]\n}\n</code></pre> <p></p> <p>The \"Age\" input is assigned an <code>id</code> key to uniquely identify it within the survey. This <code>id</code> is essential for referencing the input in disqualification logic. The disqualification condition is defined using the <code>visibleIf</code> key in the Abort Screen. In this case, participants are disqualified if the value of the \"Age\" input is less than 18.</p> <p>SurveyCompo supports multiple abort screens, allowing you to create customized disqualification messages for different scenarios. When the disqualification condition is met, the appropriate abort screen is displayed, ensuring participants understand why they are excluded from completing the survey.</p> <p>Info</p> <p>The <code>visibleIf</code> key allows you to implement powerful conditional logic in your survey. By referencing input values and external variables, you can dynamically control the visibility of pages, screens, blocks, and inputs based on participant responses. For more details, refer to the Conditional Logic documentation.</p> <p>Let\u2019s preview the disqualification logic in the Survey Builder:</p> <p></p>"},{"location":"tutorial/building/#piping","title":"Piping","text":"<p>SurveyCompo supports piping, allowing you to personalize survey questions and responses based on participant inputs. This feature enables the creation of dynamic surveys that adapt to individual participants by inserting input values and external variables into the survey content. For detailed instructions on implementing piping, refer to the Piping documentation.</p> <p>In this tutorial, we will incorporate piping to personalize the \"Disqualified Screen\" with the participant's age.</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  /*  ... */\n  \"abortScreens\": [\n    {\n      \"header\": \"Disqualified\",\n      \"description\": \"You must be 18 years or older to participate. You are currently {#age} years old.\",\n      \"okButtonLabel\": \"Close\",\n      \"visibleIf\": \"#age &lt; 18\"\n    }\n  ]\n}\n</code></pre> <p></p> <p>The <code>description</code> key of the Abort Screen includes the <code>{#age}</code> placeholder, which dynamically references the value of the \"Age\" input using its unique identifier, <code>age</code>. When a participant is disqualified, this placeholder is replaced with the participant's actual age. Piping functionality enhances survey personalization by delivering relevant information based on participant responses.</p> <p>Let\u2019s preview the piping feature in the Survey Builder by entering an age value of 11 to observe the personalized message:</p> <p></p>"},{"location":"tutorial/building/#validation","title":"Validation","text":"<p>SurveyCompo supports input validation to enhance data accuracy and minimize errors in survey responses. This feature ensures that participants provide valid and complete information based on specified criteria such as input type, format, and value. For detailed instructions on implementing validation, refer to the Validation documentation.</p> <p>In this tutorial, we will guide you through the process of setting up validation rules to improve your survey. You\u2019ll configure the \"Age\" input to accept only numerical entries within the 0\u2013100 range. Additionally, you'll make the \"Method of Contact\" question mandatory and require participants to select at least two options for the \"How did you hear about us?\" question.</p> <p>The updated JSON source will include the following validation rules:</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"About You\",\n      \"blocks\": [\n        {\n          \"title\": \"Please enter your age\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXT\",\n              \"id\": \"age\",\n              \"textInputType\": \"NUMBER\",\n              \"validations\": [\n                {\n                  \"type\": \"INTEGER\",\n                  \"message\": \"Please enter your age in whole number\"\n                },\n                {\n                  \"type\": \"MAX_VALUE\",\n                  \"value\": 100,\n                  \"message\": \"Please enter a valid age\"\n                },\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"Please enter your age\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"title\": \"What is your preferred method of contact?\",\n          \"inputs\": [\n            {\n              \"type\": \"DROPDOWN\",\n              \"hint\": \"Please select\",\n              \"dropdownInputOptions\": [\"Email\", \"Phone\", \"Text Message\"],\n              \"validations\": [\n                {\n                  \"type\": \"REQUIRED\",\n                  \"message\": \"Please select your preferred method of contact\"\n                }\n              ]\n            }\n          ]\n        },\n        {\n          \"title\": \"How did you hear about us?\",\n          \"subtitle\": \"Please select 2\",\n          \"inputs\": [\n            /** ... **/\n          ],\n          \"validations\": [\n            {\n              \"type\": \"MIN_SELECTION\",\n              \"value\": 2,\n              \"message\": \"Please select 2 or more options\"\n            }\n          ]\n        }\n      ]\n    }\n    /* ... other pages ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p></p> <p>The \"Age\" input incorporates three essential validation rules:</p> <ul> <li><code>INTEGER</code>: Ensures the input value is an integer.</li> <li><code>MAX_VALUE</code>: Specifies the maximum permissible value for the input.</li> <li><code>REQUIRED</code>: Makes the input mandatory.</li> </ul> <p>For the \"Method of Contact\" question, a <code>REQUIRED</code> validation rule ensures participants select a preferred contact method.</p> <p>In the \"How did you hear about us?\" block, a <code>MIN_SELECTION</code> validation rule enforces a minimum selection of two options.</p> <p>When a block includes a \"required\" validation rule, SurveyCompo automatically appends an asterisk (<code>*</code>) after the block index number to indicate its mandatory status.</p> <p>Note</p> <p>Setting <code>textInputType</code> to <code>NUMBER</code> for the \"Age\" input enhances the user interface by enabling features like a number keyboard and stepper. However, this setting alone does not enforce numerical validation. To ensure correct input format and value range, it\u2019s essential to apply the <code>INTEGER</code> validation rule. For comprehensive details on input types and their associated validation rules, refer to the Validation documentation.</p> <p>Let\u2019s explore how these validation rules work within the Survey Builder:</p> <p></p>"},{"location":"tutorial/building/#conditional-logic","title":"Conditional Logic","text":"<p>SurveyCompo supports conditional logic, allowing you to dynamically show or hide specific pages, blocks, and inputs based on participant responses or external variables. This feature personalizes the survey experience, ensuring participants receive relevant questions based on their previous answers. For detailed guidance on implementing conditional logic, refer to the Conditional Logic documentation.</p> <p>In this tutorial, we will integrate conditional logic into the survey. Based on the participant's response to the \"Overall satisfaction\" question, we will adjust the survey flow:</p> <ul> <li>If a participant expresses dissatisfaction, we will prompt them for additional feedback on potential product improvements.</li> <li>If a participant is satisfied, we will ask them to share what they appreciate most about the product.</li> </ul> <p>Below is the updated JSON source code for the second page of the survey:</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    /* ... first page ... */\n    {\n      \"header\": \"Product Satisfaction\",\n      \"nextButtonLabel\": \"Submit\",\n      \"blocks\": [\n        {\n          \"title\": \"Overall, how satisfied are you with our product?\",\n          \"inputs\": [\n            {\n              \"type\": \"LIKERT_SCALE\",\n              \"id\": \"satisfaction\",\n              \"likertInputPreset\": \"SATISFACTION\"\n            }\n          ]\n        },\n        {\n          \"title\": \"What do you like most about our product?\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXTAREA\",\n              \"hint\": \"Please share your thoughts\"\n            }\n          ],\n          \"visibleIf\": {\n            \"$or\": [\n              \"#satisfaction == Very satisfied\",\n              \"#satisfaction == Satisfied\"\n            ]\n          }\n        },\n        {\n          \"title\": \"What could be improved about our product?\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXTAREA\",\n              \"hint\": \"Please share your thoughts\"\n            }\n          ],\n          \"visibleIf\": {\n            \"$or\": [\n              \"#satisfaction == Very dissatisfied\",\n              \"#satisfaction == Dissatisfied\"\n            ]\n          }\n        }\n      ]\n    }\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p></p> <p>We assign an <code>id</code> (<code>satisfaction</code>) to the \"How satisfied are you?\" input. This <code>id</code> is then used to define the <code>visibleIf</code> conditional logic, a powerful tool for creating dynamic survey experiences. By referencing input values or external variables, you can dynamically show or hide pages, screens, blocks, and inputs based on participant responses.</p> <p>SurveyCompo uses Condition Expressions to define visibility conditions. In this case, we use the <code>$or</code> operator to display the \"What do you like most about our product?\" block if the participant selects \"Very satisfied\" or \"Satisfied\" on the \"Overall satisfaction\" question. Conversely, selecting \"Very dissatisfied\" or \"Dissatisfied\" will display the \"What could be improved about our product?\" block. If the participant selects \"Neither dissatisfied nor satisfied,\" follow-up questions are hidden.</p> <p>Condition Expressions support a variety of operators such as <code>$and</code>, <code>$or</code>, <code>$not</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>&gt;</code>, and <code>&lt;</code>. For a full list of operators and their usage, refer to the Conditional Logic documentation.</p> <p>For an optimal user experience, consider placing conditional blocks on separate pages. However, for this tutorial, we will keep them on the same page to demonstrate how conditional logic dynamically controls block visibility based on participant responses.</p> <p>Let\u2019s preview the conditional logic in the Survey Builder:</p> <p></p>"},{"location":"tutorial/building/#customization-with-theme","title":"Customization with Theme","text":"<p>In this tutorial, we customize the survey theme to use a custom color palette and default radius for buttons, boxes, and inputs. Additionally, we change the font family to Arial.</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"theme\": {\n    \"primaryColor\": \"#3b82f6\",\n    \"fontFamily\": \"Arial, sans-serif\",\n    \"defaultRadius\": \"2em\",\n    \"textareaRadius\": \"1em\"\n  },\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    /* ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p></p> <p>By default, SurveyCompo generates a color palette based on the <code>primaryColor</code> provided. These colors are applied to buttons, boxes, and inputs throughout the survey. The <code>fontFamily</code> key sets the font family for all text elements, while the <code>defaultRadius</code> key defines the default corner radius for buttons, boxes, and inputs. If not specified, <code>textareaRadius</code> will use the value from <code>defaultRadius</code> for textarea inputs.</p> <p>Preview the customization in the Survey Builder:</p> <p></p> <p>SurveyCompo offers extensive customization options beyond themes. You can customize surveys using custom CSS, HTML text, and various layout options to ensure they align with your brand and effectively engage your audience. For comprehensive details on customization options, refer to the Customization section of our documentation.</p>"},{"location":"tutorial/building/#html-text","title":"HTML Text","text":"<p>SurveyCompo supports HTML text within surveys to enhance the visual appeal and readability of your questions and descriptions. HTML text allows you to format content, add images, and embed videos. For more information on using HTML text, refer to the HTML Text documentation.</p> <p>In this tutorial, we\u2019ll incorporate HTML text into the page footer to include a link to the privacy policy.</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"theme\": {\n    /* ... */\n  },\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    /* ... first page ... */\n    {\n      \"header\": \"Product Satisfaction\",\n      \"nextButtonLabel\": \"Submit\",\n      \"blocks\": [\n        /* ... */\n      ],\n      \"htmlFooter\": \"&lt;p&gt;By submitting this survey, you agree to our &lt;a href='https://www.surveycompo.com/privacy'&gt;Privacy Policy&lt;/a&gt;&lt;/p&gt;\"\n    }\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p></p> <p>The <code>htmlFooter</code> key allows you to incorporate HTML text into the footer of the page. This feature supports HTML tags for formatting text, adding links, and embedding media. In the following example, we use an anchor tag to create a hyperlink to the privacy policy.</p> <p></p> <p>However, a common issue is that the link in the footer may not appear as a standard hyperlink. Typically, hyperlinks are distinguished by a different color and often underlined for clarity.</p> <p>SurveyCompo does not apply default styles to custom HTML elements. To improve the appearance of the hyperlink, you can use inline styles or CSS customization.</p> <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"theme\": {\n    /* ... */\n  },\n  \"css\": \".my-link { color: #3b82f6; text-decoration: underline; }\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    /* ... first page ... */\n    {\n      \"header\": \"Product Satisfaction\",\n      \"nextButtonLabel\": \"Submit\",\n      \"blocks\": [\n        /* ... */\n      ],\n      \"htmlFooter\": \"&lt;p&gt;By submitting this survey, you agree to our &lt;a href='https://www.surveycompo.com/privacy' class='my-link'&gt;Privacy Policy&lt;/a&gt;&lt;/p&gt;\"\n    }\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p>We assign the class name <code>my-link</code> to the hyperlink within the <code>htmlFooter</code> key. Next, we define the CSS class <code>my-link</code> in the <code>css</code> key to specify the hyperlink's color and text decoration. This customization allows us to enhance the appearance of the hyperlink.</p> <p>Preview the customized hyperlink in the Survey Builder:</p> <p></p> <p>The use of HTML text extends to various elements within the survey, including Screens, Pages, and Blocks. For more details on incorporating HTML text, refer to the HTML Text documentation.</p>"},{"location":"tutorial/building/#using-templates","title":"Using Templates","text":"<p>We recently added an HTML footer to the final page of our survey. However, if we want this footer to appear on every page, manually duplicating the HTML across each page can be time-consuming and prone to errors. Fortunately, SurveyCompo offers a solution: templates. Templates are reusable components designed to define common elements like headers, footers, and styles, allowing you to apply them consistently throughout your survey. For detailed instructions on using templates, refer to the Templates documentation.</p> <p>In this tutorial, we\u2019ll create a template specifically for the HTML footer and apply it universally across all pages of the survey.</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"theme\": {\n    /* ... */\n  },\n  \"css\": \".my-link { color: #3b82f6; text-decoration: underline; }\",\n  \"pageTemplates\": [\n    {\n      \"templateName\": \"pageWithFooter\",\n      \"htmlFooter\": \"&lt;p&gt;By submitting this survey, you agree to our &lt;a href='https://www.surveycompo.com/privacy' class='my-link'&gt;Privacy Policy&lt;/a&gt;&lt;/p&gt;\"\n    }\n  ],\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"Product Satisfaction\",\n      \"templateName\": \"pageWithFooter\",\n      \"blocks\": [\n        /* ... */\n      ]\n    },\n    {\n      \"header\": \"Product Satisfaction\",\n      \"templateName\": \"pageWithFooter\",\n      \"nextButtonLabel\": \"Submit\",\n      \"blocks\": [\n        /* ... */\n      ]\n    }\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p></p> <p>We\u2019ve successfully created a page template named <code>pageWithFooter</code> that incorporates an HTML footer. This template has been applied to both survey pages, ensuring consistency across the survey. You also have the flexibility to override template properties on specific pages as needed.</p> <p>When previewed in the Survey Builder, the HTML footer will be consistently visible on both pages where the <code>pageWithFooter</code> template is applied.</p>"},{"location":"tutorial/building/#adding-input-identifiers","title":"Adding Input Identifiers","text":"<p>As we finalize the survey\u2019s appearance, it\u2019s crucial to ensure its functionality. SurveyCompo records respondents\u2019 inputs and selections for each survey item. For example, if a respondent enters \"18\" for the age input, the expected data format would be <code>{input: 'age', value: 18}</code>. Therefore, assigning identifiers to each input in the survey is essential.</p> <p>These identifiers are also used for referencing inputs in conditional logic, validation rules, and data piping. We\u2019ve already introduced the <code>id</code> key to the \"Age\" input on the survey\u2019s first page to implement disqualification logic. The <code>id</code> ensures that the input\u2019s values are accurately captured upon survey completion. Without this identifier, determining which input corresponds to which value would be challenging.</p> JSON SourceVisual Editor <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"About You\",\n      \"blocks\": [\n        {\n          \"title\": \"Please enter your age\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXT\",\n              \"id\": \"age\",\n              \"textInputType\": \"NUMBER\"\n            }\n          ]\n        }\n        /* ... other blocks ... */\n      ]\n    }\n    /* ... other pages ... */\n  ]\n}\n</code></pre> <p></p> <p>SurveyCompo supports several optional input identifiers:</p> <ul> <li><code>id</code>: An optional identifier for the input, used for referencing in conditional logic, validation rules, and piping.</li> <li><code>name</code>: A descriptive name for the input, primarily for human reference. If <code>id</code> is not provided, <code>name</code> is used to generate an <code>id</code> value.</li> <li><code>customRef</code>: An optional custom reference for the input, useful for referencing in external systems.</li> </ul> <p>Let\u2019s proceed by adding identifiers to the inputs in our survey:</p> <pre><code>{\n  \"name\": \"Product Satisfaction Survey\",\n  \"startScreens\": [\n    /* ... */\n  ],\n  \"pages\": [\n    {\n      \"header\": \"About You\",\n      \"blocks\": [\n        {\n          \"title\": \"Please enter your age\",\n          \"inputs\": [\n            {\n              \"type\": \"TEXT\",\n              \"id\": \"age\",\n              \"textInputType\": \"NUMBER\"\n            }\n          ]\n        },\n        {\n          \"title\": \"What is your preferred method of contact?\",\n          \"inputs\": [\n            {\n              \"type\": \"DROPDOWN\",\n              \"id\": \"contactMethod\",\n              \"hint\": \"Please select\",\n              \"dropdownInputOptions\": [\"Email\", \"Phone\", \"Text Message\"]\n            }\n          ]\n        },\n        {\n          \"title\": \"How did you hear about us?\",\n          \"inputs\": [\n            {\n              \"type\": \"CHECKBOX\",\n              \"id\": \"friendFamily\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Friend/Family\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"id\": \"onlineAd\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Online Ad\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"id\": \"socialMedia\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Social Media\"\n            },\n            {\n              \"type\": \"CHECKBOX\",\n              \"id\": \"searchEngine\",\n              \"randomWithinGroup\": \"something\",\n              \"label\": \"Search Engine\"\n            },\n            {\n              \"type\": \"CHECKBOX_TEXT\",\n              \"id\": \"others\",\n              \"label\": \"Others\"\n            }\n          ]\n        }\n      ]\n    }\n    /* ... other pages ... */\n  ],\n  \"completeScreens\": [\n    /* ... */\n  ],\n  \"abortScreens\": [\n    /* ... */\n  ]\n}\n</code></pre> <p>Identifiers can also be assigned to blocks and pages. These identifiers will be accessible within SurveyCompo events. Events are triggered when participants interact with the survey, providing valuable insights into their behavior and responses. This is also how survey data is collected and analyzed. For more details on survey events, refer to the Events documentation.</p>"},{"location":"tutorial/building/#whats-next","title":"What's Next?","text":"<p>Congratulations on successfully creating a survey in SurveyCompo using the JSON data model! You\u2019ve learned how to define survey questions, answers, logic, and customization options. Additionally, you\u2019ve explored advanced features such as randomization, disqualification, validation, conditional logic, and HTML text. Mastering these concepts will help you build engaging and interactive surveys that generate valuable insights.</p> <p>Feel free to preview the survey and explore its corresponding source code on GitHub.</p> <p>In the next part of the tutorial, we\u2019ll cover distributing your survey, collecting responses, and analyzing results. We\u2019ll also explore advanced topics including survey events, webhooks, and integrations. Stay tuned for more exciting content!</p>"},{"location":"tutorial/publishing/","title":"Sharing A Survey","text":"<p>In our previous tutorial, we created a simple Product Satisfaction survey. In this guide, we\u2019ll walk through how to publish and share the survey, collect responses, and analyze the data.</p> <p>When your survey is ready, you can publish it to finalize the survey JSON model. If further edits are made, simply republish to update the survey for your audience.</p> <p>SurveyCompo provides a one-click publish button that consolidates all pending edits, generating a new version of the survey JSON model with a unique survey ID and signature hash. The survey ID uniquely identifies each survey, while the signature hash verifies the integrity of the JSON data.</p> <p></p>"},{"location":"tutorial/publishing/#sharing-your-survey-with-respondents","title":"Sharing Your Survey with Respondents","text":"<p>SurveyCompo generates a unique survey page for each survey, allowing you to easily share it with respondents and begin collecting responses. Alternatively, you can embed the survey on your website, giving you complete control over its presentation to your audience. For more information, see the Publish and Share documentation.</p> <p>In this tutorial, we'll use the SurveyCompo-hosted survey page, where responses will be securely collected and stored on SurveyCompo's servers.</p> <p></p> <p>Here is the hosted page for the survey we created in the previous tutorial:</p> <p>https://app.surveycompo.com/page/ynU7y4b62qEVyVxcspE8.html</p>"},{"location":"tutorial/publishing/#survey-response-data","title":"Survey Response Data","text":"<p>SurveyCompo provides a dashboard to view and export survey responses in real time, complete with performance metrics to help you analyze your data effectively.</p> <p></p>"},{"location":"tutorial/publishing/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully created, published, and collected responses for your survey. In this tutorial, we covered different options for hosting and collecting survey data, as well as how to view and export responses using the SurveyCompo dashboard.</p>"}]}